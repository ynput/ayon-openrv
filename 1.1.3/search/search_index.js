var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"OpenRV addon","text":"<p>This adds integration to OpenRV https://github.com/AcademySoftwareFoundation/OpenRV. OpenRV is open source version of RV - image and sequence viewer for VFX and animation artists.</p> <p>This addon doesn't provide OpenRV binaries because of licencing. Studios need to build appropriate binaries for OS they are using themselves.</p>"},{"location":"index.html#settings","title":"Settings","text":"<p>Path to binaries must be set in the Ayon Setting in <code>Applications</code> addon (<code>ayon+settings://applications/applications/openrv</code>) and added in <code>Anatomy</code>.<code>Attributes</code> for particular project to be visible in the Launcher.</p>"},{"location":"index.html#implemented-workflows","title":"Implemented workflows","text":"<p>Currently there is workflow for versioning and tracking <code>.rv</code> workfiles. Instance of <code>workfile</code> product type is automatically created when <code>Publish</code> option in <code>Ayon</code> menu inside of <code>OpenRV</code> is pressed.</p> <p>Another workflow would be publishing of <code>annotations</code>, but that is still WIP right now.</p> <p>Integrations allows to load image, image sequence or <code>.mov</code> files to the <code>.rv</code> workfile.</p>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_openrv<ul> <li>addon</li> <li>api<ul> <li>commands</li> <li>lib</li> <li>ocio</li> <li>pipeline</li> <li>review</li> </ul> </li> <li>constants</li> <li>hooks<ul> <li>pre_ftrackdata</li> <li>pre_global_tools</li> <li>pre_review_tool</li> </ul> </li> <li>networking</li> <li>plugins<ul> <li>create<ul> <li>create_workfile</li> </ul> </li> <li>load<ul> <li>global<ul> <li>play_in_rv</li> </ul> </li> <li>openrv<ul> <li>load_frames</li> <li>load_mov</li> </ul> </li> </ul> </li> <li>publish<ul> <li>collect_workfile</li> <li>extract_save_scene</li> <li>increment_workfile</li> <li>validate_workfile</li> </ul> </li> </ul> </li> <li>startup<ul> <li>pkgs_source<ul> <li>ayon_menus<ul> <li>ayon_menus</li> </ul> </li> <li>ayon_scripteditor<ul> <li>ayon_scripteditor</li> </ul> </li> <li>comments<ul> <li>comments</li> </ul> </li> </ul> </li> </ul> </li> <li>typing<ul> <li>rv<ul> <li>commands</li> <li>extra_commands</li> <li>qtutils</li> <li>rvtypes</li> </ul> </li> </ul> </li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings<ul> <li>imageio</li> <li>main</li> </ul> </li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_openrv/index.html","title":"ayon_openrv","text":""},{"location":"autoapi/client/ayon_openrv/index.html#client.ayon_openrv.OpenRVAddon","title":"<code>OpenRVAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>IHostAddon</code>, <code>IPluginPaths</code></p> Source code in <code>client/ayon_openrv/addon.py</code> <pre><code>class OpenRVAddon(AYONAddon, IHostAddon, IPluginPaths):\n    name = \"openrv\"\n    host_name = \"openrv\"\n    version = __version__\n\n    def get_plugin_paths(self):\n        return {}\n\n    def get_create_plugin_paths(self, host_name):\n        if host_name != self.host_name:\n            return []\n        plugins_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\")\n        return [os.path.join(plugins_dir, \"create\")]\n\n    def get_publish_plugin_paths(self, host_name):\n        if host_name != self.host_name:\n            return []\n        plugins_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\")\n        return [os.path.join(plugins_dir, \"publish\")]\n\n    def get_load_plugin_paths(self, host_name):\n        loaders_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\", \"load\")\n        if host_name != self.host_name:\n            # Other hosts and tray browser\n            return [os.path.join(loaders_dir, \"global\")]\n        # inside OpenRV\n        return [os.path.join(loaders_dir, \"openrv\")]\n\n    def add_implementation_envs(self, env, app):\n        \"\"\"Modify environments to contain all required for implementation.\"\"\"\n        # Set default environments if are not set via settings\n        defaults = {\n            \"AYON_LOG_NO_COLORS\": \"True\"\n        }\n        for key, value in defaults.items():\n            if not env.get(key):\n                env[key] = value\n\n    def get_launch_hook_paths(self, app):\n        if app.host_name != self.host_name:\n            return []\n        return [\n            os.path.join(OPENRV_ROOT_DIR, \"hooks\")\n        ]\n\n    def get_workfile_extensions(self):\n        return [\".rv\"]\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/index.html#client.ayon_openrv.OpenRVAddon.add_implementation_envs","title":"<code>add_implementation_envs(env, app)</code>","text":"<p>Modify environments to contain all required for implementation.</p> Source code in <code>client/ayon_openrv/addon.py</code> <pre><code>def add_implementation_envs(self, env, app):\n    \"\"\"Modify environments to contain all required for implementation.\"\"\"\n    # Set default environments if are not set via settings\n    defaults = {\n        \"AYON_LOG_NO_COLORS\": \"True\"\n    }\n    for key, value in defaults.items():\n        if not env.get(key):\n            env[key] = value\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/addon.html","title":"addon","text":""},{"location":"autoapi/client/ayon_openrv/addon.html#client.ayon_openrv.addon.OpenRVAddon","title":"<code>OpenRVAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>IHostAddon</code>, <code>IPluginPaths</code></p> Source code in <code>client/ayon_openrv/addon.py</code> <pre><code>class OpenRVAddon(AYONAddon, IHostAddon, IPluginPaths):\n    name = \"openrv\"\n    host_name = \"openrv\"\n    version = __version__\n\n    def get_plugin_paths(self):\n        return {}\n\n    def get_create_plugin_paths(self, host_name):\n        if host_name != self.host_name:\n            return []\n        plugins_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\")\n        return [os.path.join(plugins_dir, \"create\")]\n\n    def get_publish_plugin_paths(self, host_name):\n        if host_name != self.host_name:\n            return []\n        plugins_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\")\n        return [os.path.join(plugins_dir, \"publish\")]\n\n    def get_load_plugin_paths(self, host_name):\n        loaders_dir = os.path.join(OPENRV_ROOT_DIR, \"plugins\", \"load\")\n        if host_name != self.host_name:\n            # Other hosts and tray browser\n            return [os.path.join(loaders_dir, \"global\")]\n        # inside OpenRV\n        return [os.path.join(loaders_dir, \"openrv\")]\n\n    def add_implementation_envs(self, env, app):\n        \"\"\"Modify environments to contain all required for implementation.\"\"\"\n        # Set default environments if are not set via settings\n        defaults = {\n            \"AYON_LOG_NO_COLORS\": \"True\"\n        }\n        for key, value in defaults.items():\n            if not env.get(key):\n                env[key] = value\n\n    def get_launch_hook_paths(self, app):\n        if app.host_name != self.host_name:\n            return []\n        return [\n            os.path.join(OPENRV_ROOT_DIR, \"hooks\")\n        ]\n\n    def get_workfile_extensions(self):\n        return [\".rv\"]\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/addon.html#client.ayon_openrv.addon.OpenRVAddon.add_implementation_envs","title":"<code>add_implementation_envs(env, app)</code>","text":"<p>Modify environments to contain all required for implementation.</p> Source code in <code>client/ayon_openrv/addon.py</code> <pre><code>def add_implementation_envs(self, env, app):\n    \"\"\"Modify environments to contain all required for implementation.\"\"\"\n    # Set default environments if are not set via settings\n    defaults = {\n        \"AYON_LOG_NO_COLORS\": \"True\"\n    }\n    for key, value in defaults.items():\n        if not env.get(key):\n            env[key] = value\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/constants.html","title":"constants","text":""},{"location":"autoapi/client/ayon_openrv/networking.html","title":"networking","text":""},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.FailedToConnectError","title":"<code>FailedToConnectError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when failed to connect to RV.</p> Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>class FailedToConnectError(Exception):\n    \"\"\"Raised when failed to connect to RV.\"\"\"\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector","title":"<code>RVConnector</code>","text":"Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>class RVConnector:\n    addon_settings = get_addon_settings(OpenRVAddon.name, __version__)\n\n    def __init__(self, host: str = None, name: str = None, port: int = None):\n        self.host = host or \"localhost\"\n        self.name = name or self.addon_settings[\"network\"][\"conn_name\"]\n        self.port = port or self.addon_settings[\"network\"][\"conn_port\"]\n\n        self.is_connected = False\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        self.connect()\n\n    def __enter__(self):\n        \"\"\"Enters the context manager.\"\"\"\n        start = time()\n        timeout = self.addon_settings[\"network\"][\"timeout\"]\n        while True:\n            if self.is_connected:\n                break\n\n            if time() - start &gt; float(timeout):\n                raise FailedToConnectError(\n                    f\"Timeout reached. Tried with {self.host = } \"\n                    f\"{self.port =  } {self.name = } \\n\\n\"\n                    \"Check your RV settings and make sure networking \"\n                    \"port is aligned with AYON OpenRV settings.\"\n                )\n            self.connect()\n            if not self.is_connected:\n                sleep(0.01)\n        return self\n\n    def __exit__(self, *args):\n        \"\"\"Exits the context manager.\"\"\"\n        self.close()\n\n    @property\n    def message_available(self) -&gt; bool:\n        \"\"\"Checks if a message is available.\"\"\"\n        try:\n            msg = self.sock.recv(1, socket.MSG_PEEK)\n            if len(msg) &gt; 0:\n                return True\n        except Exception as err:\n            log.error(err, exc_info=True)\n\n        return False\n\n    def connect(self) -&gt; None:\n        \"\"\"Connects to the RV server.\"\"\"\n        log.debug(\"Connecting with: \"\n                  f\"{self.host = } {self.port = } {self.name = }\")\n        if self.is_connected:\n            return\n        self.__connect_socket()\n\n    def send_message(self, message):\n        log.debug(f\"send_message: {message}\")\n        if not self.is_connected:\n            return\n\n        msg = f\"MESSAGE {len(message)} {message}\"\n        try:\n            self.sock.sendall(msg.encode(\"utf-8\"))\n        except Exception:\n            self.close()\n\n    def send_event(self, eventName, eventContents, shall_return=True):\n        \"\"\"\n        Send a remote event, then wait for a return value (string).\n        eventName must be one of the events\n        listed in the RV Reference Manual.\n        \"\"\"\n        message = f\"RETURNEVENT {eventName} * {eventContents}\"\n        self.send_message(message)\n        if shall_return:\n            return self.__process_events(process_return_only=True)\n\n    def close(self):\n        if self.is_connected:\n            self.send_message(\"DISCONNECT\")\n            timeout = os.environ.get(\"AYON_RV_SOCKET_CLOSE_TIMEOUT\", 100)\n\n            if not isinstance(timeout, int):\n                timeout = int(timeout)\n\n            sleep(timeout / 1000) # wait for the message to be sent\n\n        self.sock.shutdown(socket.SHUT_RDWR)\n        self.sock.close()\n        self.is_connected = False\n\n    def receive_message(self):\n        msg_type, msg_data = \"\", None\n\n        try:\n            while True:\n                char = self.sock.recv(1).decode(\"utf-8\")\n                if char == \" \":\n                    break\n                msg_type += char\n            msg_data = self.sock.recv(\n                len(msg_type)).decode(\"utf-8\")\n        except Exception as err:\n            log.error(err, exc_info=True)\n\n        return (msg_type, msg_data)\n\n    def __send_initial_greeting(self):\n        greeting = f\"{self.name} rvController\"\n        cmd = f\"NEWGREETING {len(greeting)} {greeting}\"\n        try:\n            self.sock.sendall(cmd.encode(\"utf-8\"))\n        except Exception:\n            self.is_connected = False\n\n    def process_message(self, data):\n        log.debug(f\"process message: {data = }\")\n\n    def __process_events(self, process_return_only=False):\n        while True:\n            sleep(0.01)\n            while not self.message_available:\n                if not self.is_connected:\n                    return \"\"\n\n                if not self.message_available and process_return_only:\n                    sleep(0.01)\n                else:\n                    break\n\n            if not self.message_available:\n                break\n\n            # get single message\n            resp_type, resp_data = self.receive_message()\n            log.debug(f\"received message: {resp_type}: {resp_data}\")\n\n            if resp_type == \"MESSAGE\":\n                if resp_data == \"DISCONNECT\":\n                    self.is_connected = False\n                    self.close()\n                    return\n                # (event, event_data) = self.process_message()\n                self.process_message()\n\n            if resp_type == \"PING\":\n                self.sock.sendall(\"PONG 1 p\".encode(\"utf-8\"))\n\n    def __connect_socket(self):\n        try:\n            self.sock.connect((self.host, self.port))\n            self.__send_initial_greeting()\n            self.sock.sendall(\"PINGPONGCONTROL 1 0\".encode(\"utf-8\"))\n            self.is_connected = True\n        except Exception:\n            self.is_connected = False\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector.message_available","title":"<code>message_available</code>  <code>property</code>","text":"<p>Checks if a message is available.</p>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector.__enter__","title":"<code>__enter__()</code>","text":"<p>Enters the context manager.</p> Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>def __enter__(self):\n    \"\"\"Enters the context manager.\"\"\"\n    start = time()\n    timeout = self.addon_settings[\"network\"][\"timeout\"]\n    while True:\n        if self.is_connected:\n            break\n\n        if time() - start &gt; float(timeout):\n            raise FailedToConnectError(\n                f\"Timeout reached. Tried with {self.host = } \"\n                f\"{self.port =  } {self.name = } \\n\\n\"\n                \"Check your RV settings and make sure networking \"\n                \"port is aligned with AYON OpenRV settings.\"\n            )\n        self.connect()\n        if not self.is_connected:\n            sleep(0.01)\n    return self\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector.__exit__","title":"<code>__exit__(*args)</code>","text":"<p>Exits the context manager.</p> Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>def __exit__(self, *args):\n    \"\"\"Exits the context manager.\"\"\"\n    self.close()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector.connect","title":"<code>connect()</code>","text":"<p>Connects to the RV server.</p> Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>def connect(self) -&gt; None:\n    \"\"\"Connects to the RV server.\"\"\"\n    log.debug(\"Connecting with: \"\n              f\"{self.host = } {self.port = } {self.name = }\")\n    if self.is_connected:\n        return\n    self.__connect_socket()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/networking.html#client.ayon_openrv.networking.RVConnector.send_event","title":"<code>send_event(eventName, eventContents, shall_return=True)</code>","text":"<p>Send a remote event, then wait for a return value (string). eventName must be one of the events listed in the RV Reference Manual.</p> Source code in <code>client/ayon_openrv/networking.py</code> <pre><code>def send_event(self, eventName, eventContents, shall_return=True):\n    \"\"\"\n    Send a remote event, then wait for a return value (string).\n    eventName must be one of the events\n    listed in the RV Reference Manual.\n    \"\"\"\n    message = f\"RETURNEVENT {eventName} * {eventContents}\"\n    self.send_message(message)\n    if shall_return:\n        return self.__process_events(process_return_only=True)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/version.html","title":"version","text":"<p>Package declaring AYON addon 'openrv' version.</p>"},{"location":"autoapi/client/ayon_openrv/api/index.html","title":"api","text":"<p>OpenRV AYON host API.</p>"},{"location":"autoapi/client/ayon_openrv/api/commands.html","title":"commands","text":""},{"location":"autoapi/client/ayon_openrv/api/commands.html#client.ayon_openrv.api.commands.reset_frame_range","title":"<code>reset_frame_range()</code>","text":"<p>Set timeline frame range.</p> Source code in <code>client/ayon_openrv/api/commands.py</code> <pre><code>def reset_frame_range():\n    \"\"\" Set timeline frame range.\n    \"\"\"\n    folder_entity = get_current_folder_entity(fields={\"path\", \"attrib\"})\n    folder_path = folder_entity[\"path\"]\n    folder_attribs = folder_entity[\"attrib\"]\n\n    frame_start = folder_attribs.get(\"frameStart\")\n    frame_end = folder_attribs.get(\"frameEnd\")\n\n    if frame_start is None or frame_end is None:\n        log.warning(\"No edit information found for {}\".format(folder_path))\n        return\n\n    rv.commands.setFrameStart(frame_start)\n    rv.commands.setFrameEnd(frame_end)\n    rv.commands.setFrame(frame_start)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/commands.html#client.ayon_openrv.api.commands.set_session_fps","title":"<code>set_session_fps()</code>","text":"<p>Set session fps.</p> Source code in <code>client/ayon_openrv/api/commands.py</code> <pre><code>def set_session_fps():\n    \"\"\" Set session fps.\n    \"\"\"\n    folder_entity = get_current_folder_entity(fields={\"attrib\"})\n\n    fps = float(folder_entity[\"attrib\"].get(\"fps\", 25))\n    rv.commands.setFPS(fps)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/lib.html","title":"lib","text":""},{"location":"autoapi/client/ayon_openrv/api/lib.html#client.ayon_openrv.api.lib.active_view","title":"<code>active_view(node)</code>","text":"<p>Set active view during context</p> Source code in <code>client/ayon_openrv/api/lib.py</code> <pre><code>@contextlib.contextmanager\ndef active_view(node):\n    \"\"\"Set active view during context\"\"\"\n    with maintained_view():\n        rv.commands.setViewNode(node)\n        yield\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/lib.html#client.ayon_openrv.api.lib.group_member_of_type","title":"<code>group_member_of_type(group_node, member_type)</code>","text":"<p>Return first member of group that is of the given node type.</p> <p>This is similar to <code>rv.extra_commands.nodesInGroupOfType</code> but only returns the first entry directly if it has any match.</p> <p>Parameters:</p> Name Type Description Default <code>group_node</code> <code>str</code> <p>The group node to search in.</p> required <code>member_type</code> <code>str</code> <p>The node type to search for.</p> required <p>Returns:</p> Type Description <p>str or None: The first member found of given type or None</p> Source code in <code>client/ayon_openrv/api/lib.py</code> <pre><code>def group_member_of_type(group_node, member_type):\n    \"\"\"Return first member of group that is of the given node type.\n\n    This is similar to `rv.extra_commands.nodesInGroupOfType` but only\n    returns the first entry directly if it has any match.\n\n    Args:\n        group_node (str): The group node to search in.\n        member_type (str): The node type to search for.\n\n    Returns:\n        str or None: The first member found of given type or None\n    \"\"\"\n    for node in rv.commands.nodesInGroup(group_node):\n        if rv.commands.nodeType(node) == member_type:\n            return node\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/lib.html#client.ayon_openrv.api.lib.maintained_view","title":"<code>maintained_view()</code>","text":"<p>Reset to original view node after context</p> Source code in <code>client/ayon_openrv/api/lib.py</code> <pre><code>@contextlib.contextmanager\ndef maintained_view():\n    \"\"\"Reset to original view node after context\"\"\"\n    original = rv.commands.viewNode()\n    try:\n        yield\n    finally:\n        rv.commands.setViewNode(original)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html","title":"ocio","text":"<p>Helper functions to apply OCIO colorspace settings on groups.</p> <p>This tries to set the relevant OCIO settings on the group's look and render pipeline similar to what the OpenColorIO Basic Color Management package does in OpenRV through its <code>ocio_source_setup</code> python file.</p> <p>This assumes that the OpenColorIO Basic Color Management package of RV is both installed and loaded.</p>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.OCIONotActiveForGroup","title":"<code>OCIONotActiveForGroup</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Error raised when OCIO is not enabled on the group node.</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>class OCIONotActiveForGroup(RuntimeError):\n    \"\"\"Error raised when OCIO is not enabled on the group node.\"\"\"\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.get_group_ocio_file_node","title":"<code>get_group_ocio_file_node(group)</code>","text":"<p>Return OCIOFile node from source group</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def get_group_ocio_file_node(group):\n    \"\"\"Return OCIOFile node from source group\"\"\"\n    # make sure this only runs if OCIO is set\n    if os.environ.get(\"OCIO\") is None:\n        return\n\n    pipeline = group_member_of_type(group, \"RVLinearizePipelineGroup\")\n    if pipeline:\n        return group_member_of_type(pipeline, \"OCIOFile\")\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.get_group_ocio_look_node","title":"<code>get_group_ocio_look_node(group)</code>","text":"<p>Return OCIOLook node from source group</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def get_group_ocio_look_node(group):\n    \"\"\"Return OCIOLook node from source group\"\"\"\n    # make sure this only runs if OCIO is set\n    if os.environ.get(\"OCIO\") is None:\n        return\n\n    pipeline = group_member_of_type(group, \"RVLookPipelineGroup\")\n    if pipeline:\n        return group_member_of_type(pipeline, \"OCIOLook\")\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.set_current_ocio_active_state","title":"<code>set_current_ocio_active_state(state)</code>","text":"<p>Set the OCIO state for the currently active source.</p> <p>This is a hacky workaround to enable/disable the OCIO active state for a source since it appears to be that there's no way to explicitly trigger this callback from the <code>ocio_source_setup.OCIOSourceSetupMode</code> instance which does these changes.</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def set_current_ocio_active_state(state):\n    \"\"\"Set the OCIO state for the currently active source.\n\n    This is a hacky workaround to enable/disable the OCIO active state for\n    a source since it appears to be that there's no way to explicitly trigger\n    this callback from the `ocio_source_setup.OCIOSourceSetupMode` instance\n    which does these changes.\n\n    \"\"\"\n    # TODO: Make this logic less hacky\n    # See: https://community.shotgridsoftware.com/t/how-to-enable-disable-ocio-and-set-ocio-colorspace-for-group-using-python/17178  # noqa\n\n    group = rv.commands.viewNode()\n    ocio_node = get_group_ocio_file_node(group)\n    if state == bool(ocio_node):\n        # Already in correct state\n        return\n\n    window = rv.qtutils.sessionWindow()\n    menu_bar = window.menuBar()\n    for action in menu_bar.actions():\n        if action.text() != \"OCIO\" or action.toolTip() != \"OCIO\":\n            continue\n\n        ocio_menu = action.menu()\n\n        for ocio_action in ocio_menu.actions():\n            if ocio_action.toolTip() == \"File Color Space\":\n                # The first entry is for \"current source\" instead\n                # of all sources so we need to break the for loop\n                # The first action of the file color space menu\n                # is the \"Active\" action. So lets take that one\n                active_action = ocio_action.menu().actions()[0]\n\n                active_action.trigger()\n                return\n\n    raise RuntimeError(\n        \"Unable to set active state for current source. Make \"\n        \"sure the OCIO package is installed and loaded.\"\n    )\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.set_group_ocio_active_state","title":"<code>set_group_ocio_active_state(group, state)</code>","text":"<p>Set the OCIO state for the 'currently active source'.</p> <p>This is a hacky workaround to enable/disable the OCIO active state for a source since it appears to be that there's no way to explicitly trigger this callback from the <code>ocio_source_setup.OCIOSourceSetupMode</code> instance which does these changes.</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def set_group_ocio_active_state(group, state):\n    \"\"\"Set the OCIO state for the 'currently active source'.\n\n    This is a hacky workaround to enable/disable the OCIO active state for\n    a source since it appears to be that there's no way to explicitly trigger\n    this callback from the `ocio_source_setup.OCIOSourceSetupMode` instance\n    which does these changes.\n\n    \"\"\"\n    # make sure this only runs if OCIO is set\n    if os.environ.get(\"OCIO\") is None:\n        return\n\n    ocio_node = get_group_ocio_file_node(group)\n    if state == bool(ocio_node):\n        # Already in correct state\n        return\n\n    with active_view(group):\n        set_current_ocio_active_state(state)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.set_group_ocio_colorspace","title":"<code>set_group_ocio_colorspace(group, colorspace)</code>","text":"<p>Set the group's OCIOFile node ocio.inColorSpace property.</p> <p>This only works if OCIO is already 'active' for the group. T</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def set_group_ocio_colorspace(group, colorspace):\n    \"\"\"Set the group's OCIOFile node ocio.inColorSpace property.\n\n    This only works if OCIO is already 'active' for the group. T\n\n    \"\"\"\n    # make sure this only runs if OCIO is set\n    if os.environ.get(\"OCIO\") is None:\n        return\n\n    # RV OCIO package\n    import ocio_source_setup  # noqa: F401\n    node = get_group_ocio_file_node(group)\n\n    if not node:\n        raise OCIONotActiveForGroup(\n            \"Unable to find OCIOFile node for {}\".format(group)\n        )\n\n    rv.commands.setStringProperty(\n        f\"{node}.ocio.inColorSpace\", [colorspace], True\n    )\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/ocio.html#client.ayon_openrv.api.ocio.set_ocio_display_active_state","title":"<code>set_ocio_display_active_state()</code>","text":"<p>Set the OCIO display active state for the currently active source.</p> <p>This is a hacky workaround to enable displays to be OCIO display active state.</p> Source code in <code>client/ayon_openrv/api/ocio.py</code> <pre><code>def set_ocio_display_active_state():\n    \"\"\"Set the OCIO display active state for the currently active source.\n\n    This is a hacky workaround to enable displays to be OCIO display\n    active state.\n    \"\"\"\n\n    # See: https://community.shotgridsoftware.com/t/how-to-enable-disable-ocio-and-set-ocio-colorspace-for-group-using-python/17178  # noqa\n    activated_displays = []\n    window = rv.qtutils.sessionWindow()\n    menu_bar = window.menuBar()\n    for action in menu_bar.actions():\n        if action.text() != \"OCIO\" or action.toolTip() != \"OCIO\":\n            continue\n\n        ocio_menu = action.menu()\n\n        # first collect all activated displays\n        for ocio_action in ocio_menu.actions():\n            display_name = ocio_action.toolTip()\n            if (\n                \"DISPLAY\" in display_name\n                and ocio_action not in activated_displays\n            ):\n                activated_displays.append(ocio_action)\n\n    # It could be empty if no OCIO menu is activated\n    if activated_displays:\n        # Set the active state for all displays\n        temp_data = {\n            f\"displayGroup{index}_colorPipeline\": ocio_action\n            for index, ocio_action in enumerate(activated_displays)\n        }\n\n        for ocio_display_node, ocio_action in temp_data.items():\n            node = _get_OCIODislay_nodes().get(\n                ocio_display_node)\n            if node is None:\n                active_action = ocio_action.menu().actions()[0]\n                active_action.trigger()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html","title":"pipeline","text":""},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.get_container_nodes","title":"<code>get_container_nodes()</code>","text":"<p>Return a list of node names that are marked as loaded container.</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def get_container_nodes():\n    \"\"\"Return a list of node names that are marked as loaded container.\"\"\"\n    container_nodes = []\n    for node in rv.commands.nodes():\n        prop = f\"{node}.{AYON_ATTR_PREFIX}schema\"\n        if rv.commands.propertyExists(prop):\n            container_nodes.append(node)\n        else:\n            # backward compatibility\n            prop = f\"{node}.openpype.schema\"\n            if rv.commands.propertyExists(prop):\n                container_nodes.append(node)\n\n    return container_nodes\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.get_containers","title":"<code>get_containers()</code>","text":"<p>Yield container data for each container found in current workfile.</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def get_containers():\n    \"\"\"Yield container data for each container found in current workfile.\"\"\"\n    for node in get_container_nodes():\n        container = parse_container(node)\n        if container:\n            yield container\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.imprint","title":"<code>imprint(node, data, prefix=None)</code>","text":"<p>Store attributes with value on a node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>object</code> <p>The node to imprint data on.</p> required <code>data</code> <code>dict</code> <p>Key value pairs of attributes to create.</p> required <code>prefix</code> <code>str</code> <p>A prefix to add to all keys in the data.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def imprint(node, data, prefix=None):\n    \"\"\"Store attributes with value on a node.\n\n    Args:\n        node (object): The node to imprint data on.\n        data (dict): Key value pairs of attributes to create.\n        prefix (str): A prefix to add to all keys in the data.\n\n    Returns:\n        None\n\n    \"\"\"\n    node_prefix = f\"{node}.{prefix}\" if prefix else f\"{node}.\"\n    for attr, value in data.items():\n        # Create and set the attribute\n        prop = f\"{node_prefix}.{attr}\"\n\n        if isinstance(value, (dict, list, tuple)):\n            value = f\"{JSON_PREFIX}{json.dumps(value)}\"\n\n        if isinstance(value, (bool, int)):\n            type_name = \"Int\"\n        elif isinstance(value, float):\n            type_name = \"Float\"\n        elif isinstance(value, str):\n            type_name = \"String\"\n        else:\n            raise TypeError(\"Unsupport data type to imprint: \"\n                            \"{} (type: {})\".format(value, type(value)))\n\n        if not rv.commands.propertyExists(prop):\n            type_ = getattr(rv.commands, f\"{type_name}Type\")\n            rv.commands.newProperty(prop, type_, 1)\n        set_property = getattr(rv.commands, f\"set{type_name}Property\")\n        set_property(prop, [value], True)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.imprint_container","title":"<code>imprint_container(node, name, namespace, context, loader)</code>","text":"<p>Imprint <code>node</code> with container metadata.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>object</code> <p>The node to containerise.</p> required <code>name</code> <code>str</code> <p>Name of resulting assembly</p> required <code>namespace</code> <code>str</code> <p>Namespace under which to host container</p> required <code>context</code> <code>dict</code> <p>Asset information</p> required <code>loader</code> <code>str</code> <p>Name of loader used to produce this container.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def imprint_container(node, name, namespace, context, loader):\n    \"\"\"Imprint `node` with container metadata.\n\n    Arguments:\n        node (object): The node to containerise.\n        name (str): Name of resulting assembly\n        namespace (str): Namespace under which to host container\n        context (dict): Asset information\n        loader (str): Name of loader used to produce this container.\n\n    Returns:\n        None\n\n    \"\"\"\n\n    data = {\n        \"schema\": \"ayon:container-2.0\",\n        \"id\": str(AYON_CONTAINER_ID),\n        \"name\": str(name),\n        \"namespace\": str(namespace),\n        \"loader\": str(loader),\n        \"representation\": str(context[\"representation\"][\"id\"])\n    }\n\n    imprint(node, data, prefix=AYON_ATTR_PREFIX)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.parse_container","title":"<code>parse_container(node)</code>","text":"<p>Returns imprinted container data of a tool</p> <p>This reads the imprinted data from <code>imprint_container</code>.</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def parse_container(node):\n    \"\"\"Returns imprinted container data of a tool\n\n    This reads the imprinted data from `imprint_container`.\n\n    \"\"\"\n    # If not all required data return None\n    required = ['id', 'schema', 'name',\n                'namespace', 'loader', 'representation']\n\n    data = {}\n    for key in required:\n        prop = f\"{node}.{AYON_ATTR_PREFIX}{key}\"\n        if not rv.commands.propertyExists(prop):\n            # backward compatibility\n            prop = f\"{node}.openpype.{key}\"\n            if not rv.commands.propertyExists(prop):\n                return\n\n        value = rv.commands.getStringProperty(prop)[0]\n        data[key] = value\n\n    # Store the node's name\n    data[\"objectName\"] = str(node)\n\n    # Store reference to the node object\n    data[\"node\"] = node\n\n    return data\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/pipeline.html#client.ayon_openrv.api.pipeline.read","title":"<code>read(node, prefix=None)</code>","text":"<p>Read properties from the given node with the values</p> <p>This function assumes all read values are of a single width and will return only the first entry. As such, arrays or multidimensional properties will not be returned correctly.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>str</code> <p>Name of node.</p> required <code>prefix</code> <code>str</code> <p>A prefix for the attributes to consider. This prefix will be stripped from the output key.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>The key, value of the properties.</p> Source code in <code>client/ayon_openrv/api/pipeline.py</code> <pre><code>def read(node, prefix=None):\n    \"\"\"Read properties from the given node with the values\n\n    This function assumes all read values are of a single width and will\n    return only the first entry. As such, arrays or multidimensional properties\n    will not be returned correctly.\n\n    Args:\n        node (str): Name of node.\n        prefix (str, optional): A prefix for the attributes to consider.\n            This prefix will be stripped from the output key.\n\n    Returns:\n        dict: The key, value of the properties.\n\n    \"\"\"\n    properties = rv.commands.properties(node)\n    node_prefix = f\"{node}.{prefix}\" if prefix else f\"{node}.\"\n    type_getters = {\n        1: rv.commands.getFloatProperty,\n        2: rv.commands.getIntProperty,\n        # Not sure why 3, 4 and 5 don't seem to be types\n        5: rv.commands.getHalfProperty,\n        6: rv.commands.getByteProperty,\n        8: rv.commands.getStringProperty\n    }\n\n    data = {}\n    for prop in properties:\n        if prefix is not None and not prop.startswith(node_prefix):\n            continue\n\n        info = rv.commands.propertyInfo(prop)\n        type_num = info[\"type\"]\n        value = type_getters[type_num](prop)\n        if value:\n            value = value[0]\n        else:\n            value = None\n\n        if type_num == 8 and value and value.strip().startswith(JSON_PREFIX):\n            # String\n            value = json.loads(value.strip()[len(JSON_PREFIX):])\n\n        key = prop[len(node_prefix):]\n        data[key] = value\n\n    return data\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/review.html","title":"review","text":"<p>review code</p>"},{"location":"autoapi/client/ayon_openrv/api/review.html#client.ayon_openrv.api.review.extract_annotated_frame","title":"<code>extract_annotated_frame(filepath=None)</code>","text":"<p>Export frame to file</p> Source code in <code>client/ayon_openrv/api/review.py</code> <pre><code>def extract_annotated_frame(filepath=None):\n    \"\"\"Export frame to file\n    \"\"\"\n    if filepath:\n        return rv.commands.exportCurrentFrame(filepath)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/api/review.html#client.ayon_openrv.api.review.get_path_annotated_frame","title":"<code>get_path_annotated_frame(frame=None, folder_name=None, folder_path=None)</code>","text":"<p>Get path for annotations</p> Source code in <code>client/ayon_openrv/api/review.py</code> <pre><code>def get_path_annotated_frame(frame=None, folder_name=None, folder_path=None):\n    \"\"\"Get path for annotations\n    \"\"\"\n    # TODO: This should be less hardcoded\n    filename = os.path.normpath(\n        \"{}/ayon/exports/annotated_frames/annotate_{}_{}.jpg\".format(\n            str(folder_path),\n            str(folder_name),\n            str(frame)\n        )\n    )\n    return filename\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/hooks/index.html","title":"hooks","text":""},{"location":"autoapi/client/ayon_openrv/hooks/pre_ftrackdata.html","title":"pre_ftrackdata","text":""},{"location":"autoapi/client/ayon_openrv/hooks/pre_ftrackdata.html#client.ayon_openrv.hooks.pre_ftrackdata.PreFtrackData","title":"<code>PreFtrackData</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Pre-hook for openrv/ftrack.</p> Source code in <code>client/ayon_openrv/hooks/pre_ftrackdata.py</code> <pre><code>class PreFtrackData(PreLaunchHook):\n    \"\"\"Pre-hook for openrv/ftrack.\"\"\"\n    app_groups = [\"openrv\"]\n\n    def execute(self):\n\n        representations = self.data.get(\"extra\", None)\n        if representations:\n            payload = {\"representations\": representations}\n            with tempfile.NamedTemporaryFile(mode=\"w+\", delete=False) as file:\n                json.dump(payload, file)\n\n            self.launch_context.env[\"AYON_LOADER_REPRESENTATIONS\"] = str(file.name)  # noqa\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/hooks/pre_global_tools.html","title":"pre_global_tools","text":""},{"location":"autoapi/client/ayon_openrv/hooks/pre_global_tools.html#client.ayon_openrv.hooks.pre_global_tools.PreGlobalTools","title":"<code>PreGlobalTools</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Pre-hook for openrv</p> Source code in <code>client/ayon_openrv/hooks/pre_global_tools.py</code> <pre><code>class PreGlobalTools(PreLaunchHook):\n    \"\"\"Pre-hook for openrv\"\"\"\n    app_groups = [\"openrv\"]\n\n    def execute(self):\n        executable = self.launch_context.executable\n\n        # We use the `rvpkg` executable next to the `rv` executable to\n        # install and opt-in to the AYON plug-in packages\n        rvpkg = Path(os.path.dirname(str(executable))) / \"rvpkg\"\n        packages_src_folder = Path(OPENRV_ROOT_DIR) / \"startup\" / \"pkgs_source\"\n\n        # TODO: Are we sure we want to deploy the addons into a temporary\n        #   RV_SUPPORT_PATH on each launch. This would create redundant temp\n        #   files that remain on disk but it does allow us to ensure RV is\n        #   now running with the correct version of the RV packages of this\n        #   current running AYON version\n        ay_support_path = Path(tempfile.mkdtemp(\n            prefix=\"ayon_openrv_support_path_\"\n        ))\n\n        # Write the AYON RV package zips directly to the support path\n        # Packages/ folder then we don't need to `rvpkg -add` them afterwards\n        packages_dest_folder = ay_support_path / \"Packages\"\n        packages_dest_folder.mkdir(exist_ok=True)\n        packages = [\"ayon_menus\", \"ayon_scripteditor\"]\n        for package_name in packages:\n            package_src = packages_src_folder / package_name\n            package_dest = packages_dest_folder / \"{}.zip\".format(package_name)\n\n            self.log.debug(f\"Writing: {package_dest}\")\n            shutil.make_archive(str(package_dest), \"zip\", str(package_src))\n\n        # Install and opt-in the AYON RV packages\n        install_args = [rvpkg, \"-only\", ay_support_path, \"-install\", \"-force\"]\n        install_args.extend(packages)\n        optin_args = [rvpkg, \"-only\", ay_support_path, \"-optin\", \"-force\"]\n        optin_args.extend(packages)\n        run_subprocess(install_args, logger=self.log)\n        run_subprocess(optin_args, logger=self.log)\n\n        self.log.debug(f\"Adding RV_SUPPORT_PATH: {ay_support_path}\")\n        support_path = self.launch_context.env.get(\"RV_SUPPORT_PATH\")\n        if support_path:\n            support_path = os.pathsep.join([support_path,\n                                            str(ay_support_path)])\n        else:\n            support_path = str(ay_support_path)\n        self.log.debug(f\"Setting RV_SUPPORT_PATH: {support_path}\")\n        self.launch_context.env[\"RV_SUPPORT_PATH\"] = support_path\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/hooks/pre_review_tool.html","title":"pre_review_tool","text":""},{"location":"autoapi/client/ayon_openrv/hooks/pre_review_tool.html#client.ayon_openrv.hooks.pre_review_tool.PreReviewTool","title":"<code>PreReviewTool</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Pre-hook for openrv</p> Source code in <code>client/ayon_openrv/hooks/pre_review_tool.py</code> <pre><code>class PreReviewTool(PreLaunchHook):\n    \"\"\"Pre-hook for openrv\"\"\"\n    app_groups = [\"openrv\"]\n\n    def execute(self):\n        executable = self.launch_context.executable\n\n        # We use the `rvpkg` executable next to the `rv` executable to\n        # install and opt-in to the AYON plug-in packages\n        rvpkg = Path(os.path.dirname(str(executable))) / \"rvpkg\"\n        packages_src_folder = Path(OPENRV_ROOT_DIR) / \"startup\" / \"pkgs_source\"\n\n        # TODO: Are we sure we want to deploy the addons into a temporary\n        #   RV_SUPPORT_PATH on each launch. This would create redundant temp\n        #   files that remain on disk but it does allow us to ensure RV is\n        #   now running with the correct version of the RV packages of this\n        #   current running AYON version\n        ay_support_path = Path(tempfile.mkdtemp(\n            prefix=\"ayon_openrv_support_path_\"\n        ))\n\n        # Write the AYON RV package zips directly to the support path\n        # Packages/ folder then we don't need to `rvpkg -add` them afterwards\n        packages_dest_folder = ay_support_path / \"Packages\"\n        packages_dest_folder.mkdir(exist_ok=True)\n        packages = [\"comments\"]\n        for package_name in packages:\n            package_src = packages_src_folder / package_name\n            package_dest = packages_dest_folder / \"{}.zip\".format(package_name)\n\n            self.log.debug(f\"Writing: {package_dest}\")\n            shutil.make_archive(str(package_dest), \"zip\", str(package_src))\n\n        # Install and opt-in the AYON RV packages\n        install_args = [rvpkg, \"-only\", ay_support_path, \"-install\", \"-force\"]\n        install_args.extend(packages)\n        optin_args = [rvpkg, \"-only\", ay_support_path, \"-optin\", \"-force\"]\n        optin_args.extend(packages)\n        run_subprocess(install_args, logger=self.log)\n        run_subprocess(optin_args, logger=self.log)\n\n        self.log.debug(f\"Adding RV_SUPPORT_PATH: {ay_support_path}\")\n        support_path = self.launch_context.env.get(\"RV_SUPPORT_PATH\")\n        if support_path:\n            support_path = os.pathsep.join([support_path,\n                                            str(ay_support_path)])\n        else:\n            support_path = str(ay_support_path)\n        self.log.debug(f\"Setting RV_SUPPORT_PATH: {support_path}\")\n        self.launch_context.env[\"RV_SUPPORT_PATH\"] = support_path\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/index.html","title":"plugins","text":""},{"location":"autoapi/client/ayon_openrv/plugins/create/index.html","title":"create","text":""},{"location":"autoapi/client/ayon_openrv/plugins/create/create_workfile.html","title":"create_workfile","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/index.html","title":"load","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/global/index.html","title":"global","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/global/play_in_rv.html","title":"play_in_rv","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/global/play_in_rv.html#client.ayon_openrv.plugins.load.global.play_in_rv.PlayInRV","title":"<code>PlayInRV</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Opens representation with network connected OpenRV</p> <p>Could be run from Loader in DCC or outside. It expects to be run only on representations published to any task!</p> Source code in <code>client/ayon_openrv/plugins/load/global/play_in_rv.py</code> <pre><code>class PlayInRV(load.LoaderPlugin):\n    \"\"\"Opens representation with network connected OpenRV\n\n    Could be run from Loader in DCC or outside.\n    It expects to be run only on representations published to any task!\n    \"\"\"\n\n    product_types = {\"*\"}\n    representations = {\"*\"}\n    extensions = {\n        ext.lstrip(\".\")\n        for ext in IMAGE_EXTENSIONS | VIDEO_EXTENSIONS\n    }\n\n    label = \"Open in RV\"\n    order = -10\n    icon = \"play-circle\"\n    color = \"orange\"\n\n    def load(self, context, name, namespace, data):\n        rvcon = RVConnector()\n        if not rvcon.is_connected:\n            # get launch context variables\n            project_name, folder_path, task_name = (\n                self._get_lauch_context(context)\n            )\n            # launch RV with context\n            app_manager = ApplicationManager()\n            openrv_app = app_manager.find_latest_available_variant_for_group(\n                \"openrv\"\n            )\n            if not openrv_app:\n                raise LoadError(\n                    \"No configured OpenRV found in\"\n                    \" Applications. Ask admin to configure it\"\n                    \" in ayon+settings://applications/applications/openrv.\"\n                    \"\\nProvide '-network' there as argument.\"\n                )\n            openrv_app.launch(\n                project_name=project_name,\n                folder_path=folder_path,\n                task_name=task_name\n            )\n\n        payload = json.dumps([{\n            \"objectName\": context[\"representation\"][\"name\"],\n            \"representation\": context[\"representation\"][\"id\"],\n        }])\n        # This also retries the connection\n        try:\n            with rvcon:\n                rvcon.send_event(\n                    \"ayon_load_container\",\n                    payload,\n                    shall_return=False\n                )\n        except FailedToConnectError as exc:\n            raise LoadError(str(exc))\n\n    def _get_lauch_context(self, context):\n        # get launch context variables\n        project_name = context[\"project\"][\"name\"]\n\n        folder_entity = context[\"folder\"]\n        folder_path = folder_entity.get(\"path\")\n        if not folder_path:\n            raise LoadError(\n                \"Selected representation does not have available folder.\"\n                \" It is not possible to start OpenRV.\"\n            )\n\n        task_entity = None\n        task_id = context[\"version\"][\"taskId\"]\n        # could be published without task from Publisher\n        if task_id:\n            task_entity = ayon_api.get_task_by_id(project_name, task_id)\n\n        if not task_entity:\n            repre_context = context[\"representation\"][\"context\"]\n            task_info = repre_context.get(\"task\")\n            task_name = None\n            if task_info:\n                if isinstance(task_info, str):\n                    task_name = task_info\n                elif isinstance(task_info, dict):\n                    task_name = task_info.get(\"name\")\n\n            if task_name:\n                task_entity = ayon_api.get_task_by_name(\n                    project_name, folder_entity[\"id\"], task_name\n                )\n\n        task_name = None\n        if task_entity:\n            task_name = task_entity[\"name\"]\n        return project_name, folder_path, task_name\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/index.html","title":"openrv","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html","title":"load_frames","text":"<p>Loader for image sequences and single frames in OpenRV.</p>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html#client.ayon_openrv.plugins.load.openrv.load_frames.FramesLoader","title":"<code>FramesLoader</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Load frames into OpenRV.</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_frames.py</code> <pre><code>class FramesLoader(load.LoaderPlugin):\n    \"\"\"Load frames into OpenRV.\"\"\"\n\n    label = \"Load Frames\"\n    product_types: ClassVar[set] = {\"*\"}\n    representations: ClassVar[set] = {\"*\"}\n    extensions: ClassVar[set] = {ext.lstrip(\".\") for ext in IMAGE_EXTENSIONS}\n    order = 0\n\n    icon = \"code-fork\"\n    color = \"orange\"\n\n    def load(\n        self,\n        context: dict,\n        name: str | None = None,\n        namespace: str | None = None,\n        options: dict | None = None,\n    ) -&gt; None:\n        \"\"\"Load the frames into OpenRV.\"\"\"\n        filepath = rv.commands.sequenceOfFile(\n            self.filepath_from_context(context),\n        )[0]\n\n        rep_name = os.path.basename(filepath)\n\n        # change path\n        namespace = namespace or context[\"folder\"][\"name\"]\n        loaded_node = rv.commands.addSourceVerbose([filepath])\n\n        node = self._finalize_loaded_node(loaded_node, rep_name, filepath)\n\n        # update colorspace\n        self.set_representation_colorspace(node, context[\"representation\"])\n\n        imprint_container(\n            node,\n            name=name,\n            namespace=namespace,\n            context=context,\n            loader=self.__class__.__name__,\n        )\n\n    def _finalize_loaded_node(self, loaded_node, rep_name, filepath):\n        \"\"\"Finalize the loaded node in OpenRV.\n\n        We are organizing all loaded sources under a switch group so we can\n        let user switch between versions later on. Every new updated verion is\n        added as new media representation under the switch group.\n\n        We are removing firstly added source since it does not have a name.\n\n        Args:\n            loaded_node (str): The node that was loaded.\n            rep_name (str): The name of the representation.\n            filepath (str): The path of the representation.\n\n        Returns:\n            str: The node that was loaded.\n\n        \"\"\"\n        node = loaded_node\n\n        rv.commands.addSourceMediaRep(\n            loaded_node,\n            rep_name,\n            [filepath],\n        )\n        rv.commands.setActiveSourceMediaRep(\n            loaded_node,\n            rep_name,\n        )\n        switch_node = rv.commands.sourceMediaRepSwitchNode(loaded_node)\n        node_type = rv.commands.nodeType(switch_node)\n\n        for node in rv.commands.sourceMediaRepsAndNodes(switch_node):\n            source_node_name = node[0]\n            source_node = node[1]\n            node_type = rv.commands.nodeType(source_node)\n            node_gorup = rv.commands.nodeGroup(source_node)\n\n            # we are removing the firstly added wource since it does not have\n            # a name and we don't want to confuse the user with multiple\n            # versions of the same source but one of them without a name\n            if node_type == \"RVFileSource\" and source_node_name == \"\":\n                rv.commands.deleteNode(node_gorup)\n            else:\n                node = source_node\n                break\n\n        rv.commands.setStringProperty(f\"{node}.media.name\", [rep_name], True)\n\n        rv.commands.reload()\n        return node\n\n    def update(self, container: dict, context: dict) -&gt; None:\n        \"\"\"Update loaded container.\"\"\"\n        node = container[\"node\"]\n        filepath = rv.commands.sequenceOfFile(\n            self.filepath_from_context(context),\n        )[0]\n\n        repre_entity = context[\"representation\"]\n\n        new_rep_name = os.path.basename(filepath)\n        source_reps = rv.commands.sourceMediaReps(node)\n        self.log.warning(f\"&gt;&gt; source_reps: {source_reps}\")\n\n        if new_rep_name not in source_reps:\n            # change path\n            rv.commands.addSourceMediaRep(\n                node,\n                new_rep_name,\n                [filepath],\n            )\n        else:\n            self.log.warning(\"&gt;&gt; new_rep_name already in source_reps\")\n\n        rv.commands.setActiveSourceMediaRep(\n            node,\n            new_rep_name,\n        )\n        source_rep_name = rv.commands.sourceMediaRep(node)\n        self.log.info(f\"New source_rep_name: {source_rep_name}\")\n\n        # update colorspace\n        self.set_representation_colorspace(node, context[\"representation\"])\n\n        # add data for inventory manager\n        rv.commands.setStringProperty(\n            f\"{node}.ayon.representation\",\n            [repre_entity[\"id\"]],\n            True,\n        )\n        rv.commands.reload()\n\n    def remove(self, container: dict) -&gt; None:  # noqa: PLR6301\n        \"\"\"Remove loaded container.\"\"\"\n        node = container[\"node\"]\n        # since we are organizing all loaded sources under a switch group\n        # we need to remove all the source nodes organized under it\n        switch_node = rv.commands.sourceMediaRepSwitchNode(node)\n        if not switch_node:\n            # just in case someone removed it maunally\n            return\n\n        for node in rv.commands.sourceMediaRepsAndNodes(switch_node):\n            source_node_name = node[0]\n            source_node = node[1]\n            node_type = rv.commands.nodeType(source_node)\n            node_group = rv.commands.nodeGroup(source_node)\n\n            if node_type == \"RVFileSource\":\n                self.log.info(f\"Removing: {source_node_name}\")\n                rv.commands.deleteNode(node_group)\n\n        rv.commands.reload()\n        # switch node is child of some other node. find its parent node\n        parent_node = rv.commands.nodeGroup(switch_node)\n        if parent_node:\n            self.log.info(f\"Removing: {parent_node}\")\n            rv.commands.deleteNode(parent_node)\n\n    @staticmethod\n    def set_representation_colorspace(node: str, representation: dict) -&gt; None:\n        \"\"\"Set colorspace based on representation data.\"\"\"\n        colorspace_data = representation.get(\"data\", {}).get(\"colorspaceData\")\n        if colorspace_data:\n            colorspace = colorspace_data[\"colorspace\"]\n            # TODO: Confirm colorspace is valid in current OCIO config\n            #   otherwise errors will be spammed from OpenRV for invalid space\n            group = rv.commands.nodeGroup(node)\n\n            # Enable OCIO for the node and set the colorspace\n            set_group_ocio_active_state(group, state=True)\n            set_group_ocio_colorspace(group, colorspace)\n\n    def switch(self, container, context):\n        self.update(container, context)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html#client.ayon_openrv.plugins.load.openrv.load_frames.FramesLoader.load","title":"<code>load(context, name=None, namespace=None, options=None)</code>","text":"<p>Load the frames into OpenRV.</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_frames.py</code> <pre><code>def load(\n    self,\n    context: dict,\n    name: str | None = None,\n    namespace: str | None = None,\n    options: dict | None = None,\n) -&gt; None:\n    \"\"\"Load the frames into OpenRV.\"\"\"\n    filepath = rv.commands.sequenceOfFile(\n        self.filepath_from_context(context),\n    )[0]\n\n    rep_name = os.path.basename(filepath)\n\n    # change path\n    namespace = namespace or context[\"folder\"][\"name\"]\n    loaded_node = rv.commands.addSourceVerbose([filepath])\n\n    node = self._finalize_loaded_node(loaded_node, rep_name, filepath)\n\n    # update colorspace\n    self.set_representation_colorspace(node, context[\"representation\"])\n\n    imprint_container(\n        node,\n        name=name,\n        namespace=namespace,\n        context=context,\n        loader=self.__class__.__name__,\n    )\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html#client.ayon_openrv.plugins.load.openrv.load_frames.FramesLoader.remove","title":"<code>remove(container)</code>","text":"<p>Remove loaded container.</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_frames.py</code> <pre><code>def remove(self, container: dict) -&gt; None:  # noqa: PLR6301\n    \"\"\"Remove loaded container.\"\"\"\n    node = container[\"node\"]\n    # since we are organizing all loaded sources under a switch group\n    # we need to remove all the source nodes organized under it\n    switch_node = rv.commands.sourceMediaRepSwitchNode(node)\n    if not switch_node:\n        # just in case someone removed it maunally\n        return\n\n    for node in rv.commands.sourceMediaRepsAndNodes(switch_node):\n        source_node_name = node[0]\n        source_node = node[1]\n        node_type = rv.commands.nodeType(source_node)\n        node_group = rv.commands.nodeGroup(source_node)\n\n        if node_type == \"RVFileSource\":\n            self.log.info(f\"Removing: {source_node_name}\")\n            rv.commands.deleteNode(node_group)\n\n    rv.commands.reload()\n    # switch node is child of some other node. find its parent node\n    parent_node = rv.commands.nodeGroup(switch_node)\n    if parent_node:\n        self.log.info(f\"Removing: {parent_node}\")\n        rv.commands.deleteNode(parent_node)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html#client.ayon_openrv.plugins.load.openrv.load_frames.FramesLoader.set_representation_colorspace","title":"<code>set_representation_colorspace(node, representation)</code>  <code>staticmethod</code>","text":"<p>Set colorspace based on representation data.</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_frames.py</code> <pre><code>@staticmethod\ndef set_representation_colorspace(node: str, representation: dict) -&gt; None:\n    \"\"\"Set colorspace based on representation data.\"\"\"\n    colorspace_data = representation.get(\"data\", {}).get(\"colorspaceData\")\n    if colorspace_data:\n        colorspace = colorspace_data[\"colorspace\"]\n        # TODO: Confirm colorspace is valid in current OCIO config\n        #   otherwise errors will be spammed from OpenRV for invalid space\n        group = rv.commands.nodeGroup(node)\n\n        # Enable OCIO for the node and set the colorspace\n        set_group_ocio_active_state(group, state=True)\n        set_group_ocio_colorspace(group, colorspace)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_frames.html#client.ayon_openrv.plugins.load.openrv.load_frames.FramesLoader.update","title":"<code>update(container, context)</code>","text":"<p>Update loaded container.</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_frames.py</code> <pre><code>def update(self, container: dict, context: dict) -&gt; None:\n    \"\"\"Update loaded container.\"\"\"\n    node = container[\"node\"]\n    filepath = rv.commands.sequenceOfFile(\n        self.filepath_from_context(context),\n    )[0]\n\n    repre_entity = context[\"representation\"]\n\n    new_rep_name = os.path.basename(filepath)\n    source_reps = rv.commands.sourceMediaReps(node)\n    self.log.warning(f\"&gt;&gt; source_reps: {source_reps}\")\n\n    if new_rep_name not in source_reps:\n        # change path\n        rv.commands.addSourceMediaRep(\n            node,\n            new_rep_name,\n            [filepath],\n        )\n    else:\n        self.log.warning(\"&gt;&gt; new_rep_name already in source_reps\")\n\n    rv.commands.setActiveSourceMediaRep(\n        node,\n        new_rep_name,\n    )\n    source_rep_name = rv.commands.sourceMediaRep(node)\n    self.log.info(f\"New source_rep_name: {source_rep_name}\")\n\n    # update colorspace\n    self.set_representation_colorspace(node, context[\"representation\"])\n\n    # add data for inventory manager\n    rv.commands.setStringProperty(\n        f\"{node}.ayon.representation\",\n        [repre_entity[\"id\"]],\n        True,\n    )\n    rv.commands.reload()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_mov.html","title":"load_mov","text":""},{"location":"autoapi/client/ayon_openrv/plugins/load/openrv/load_mov.html#client.ayon_openrv.plugins.load.openrv.load_mov.MovLoader","title":"<code>MovLoader</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Load mov into OpenRV</p> Source code in <code>client/ayon_openrv/plugins/load/openrv/load_mov.py</code> <pre><code>class MovLoader(load.LoaderPlugin):\n    \"\"\"Load mov into OpenRV\"\"\"\n\n    label = \"Load MOV\"\n    product_types: ClassVar[set] = {\"*\"}\n    representations: ClassVar[set] = {\"*\"}\n    extensions: ClassVar[set] = {\"mov\", \"mp4\"}\n    order = 0\n\n    icon = \"code-fork\"\n    color = \"orange\"\n\n    def load(\n        self,\n        context: dict,\n        name: str | None = None,\n        namespace: str | None = None,\n        options: dict | None = None,\n    ) -&gt; None:\n        filepath = self.filepath_from_context(context)\n        namespace = namespace if namespace else context[\"folder\"][\"name\"]\n        rep_name = os.path.basename(filepath)\n\n        loaded_node = rv.commands.addSourceVerbose([filepath])\n\n        node = self._finalize_loaded_node(loaded_node, rep_name, filepath)\n\n        # update colorspace\n        self.set_representation_colorspace(node, context[\"representation\"])\n\n        imprint_container(\n            node,\n            name=name,\n            namespace=namespace,\n            context=context,\n            loader=self.__class__.__name__,\n        )\n\n    def _finalize_loaded_node(self, loaded_node, rep_name, filepath):\n        \"\"\"Finalize the loaded node in OpenRV.\n\n        We are organizing all loaded sources under a switch group so we can\n        let user switch between versions later on. Every new updated verion is\n        added as new media representation under the switch group.\n\n        We are removing firstly added source since it does not have a name.\n\n        Args:\n            loaded_node (str): The node that was loaded.\n            rep_name (str): The name of the representation.\n            filepath (str): The path of the representation.\n\n        Returns:\n            str: The node that was loaded.\n\n        \"\"\"\n        node = loaded_node\n\n        rv.commands.addSourceMediaRep(loaded_node, rep_name, [filepath])\n        rv.commands.setActiveSourceMediaRep(\n            loaded_node,\n            rep_name,\n        )\n        switch_node = rv.commands.sourceMediaRepSwitchNode(loaded_node)\n        node_type = rv.commands.nodeType(switch_node)\n\n        for node in rv.commands.sourceMediaRepsAndNodes(switch_node):\n            source_node_name = node[0]\n            source_node = node[1]\n            node_type = rv.commands.nodeType(source_node)\n            node_gorup = rv.commands.nodeGroup(source_node)\n\n            # we are removing the firstly added wource since it does not have\n            # a name and we don't want to confuse the user with multiple\n            # versions of the same source but one of them without a name\n            if node_type == \"RVFileSource\" and source_node_name == \"\":\n                rv.commands.deleteNode(node_gorup)\n            else:\n                node = source_node\n                break\n\n        rv.commands.setStringProperty(f\"{node}.media.name\", [rep_name], True)\n\n        rv.commands.reload()\n        return node\n\n    def update(self, container, context):\n        node = container[\"node\"]\n        filepath = rv.commands.sequenceOfFile(\n            self.filepath_from_context(context)\n        )[0]\n\n        repre_entity = context[\"representation\"]\n\n        new_rep_name = os.path.basename(filepath)\n        source_reps = rv.commands.sourceMediaReps(node)\n        self.log.warning(f\"&gt;&gt; source_reps: {source_reps}\")\n\n        if new_rep_name not in source_reps:\n            # change path\n            rv.commands.addSourceMediaRep(node, new_rep_name, [filepath])\n        else:\n            self.log.warning(\"&gt;&gt; new_rep_name already in source_reps\")\n\n        rv.commands.setActiveSourceMediaRep(\n            node,\n            new_rep_name,\n        )\n        source_rep_name = rv.commands.sourceMediaRep(node)\n        self.log.info(f\"New source_rep_name: {source_rep_name}\")\n\n        # update colorspace\n        representation = context[\"representation\"]\n        self.set_representation_colorspace(node, representation)\n\n        # add data for inventory manager\n        rv.commands.setStringProperty(\n            f\"{node}.ayon.representation\",\n            [repre_entity[\"id\"]],\n            True,\n        )\n        rv.commands.reload()\n\n    def remove(self, container):\n        node = container[\"node\"]\n        # since we are organizing all loaded sources under a switch group\n        # we need to remove all the source nodes organized under it\n        switch_node = rv.commands.sourceMediaRepSwitchNode(node)\n        for node_data in rv.commands.sourceMediaRepsAndNodes(switch_node):\n            source_node_name = node_data[0]\n            source_node = node_data[1]\n            node_type = rv.commands.nodeType(source_node)\n            node_group = rv.commands.nodeGroup(source_node)\n\n            if node_type == \"RVFileSource\":\n                self.log.warning(f\"&gt;&gt; node_type: {node_type}\")\n                self.log.warning(f\"&gt;&gt; source_node_name: {source_node_name}\")\n                rv.commands.deleteNode(node_group)\n\n        rv.commands.reload()\n\n    def set_representation_colorspace(self, node, representation):\n        colorspace_data = representation.get(\"data\", {}).get(\"colorspaceData\")\n        if colorspace_data:\n            colorspace = colorspace_data[\"colorspace\"]\n            # TODO: Confirm colorspace is valid in current OCIO config\n            #   otherwise errors will be spammed from OpenRV for invalid space\n\n            self.log.info(f\"Setting colorspace: {colorspace}\")\n            group = rv.commands.nodeGroup(node)\n\n            # Enable OCIO for the node and set the colorspace\n            set_group_ocio_active_state(group, state=True)\n            set_group_ocio_colorspace(group, colorspace)\n\n    def switch(self, container, context):\n        self.update(container, context)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/publish/index.html","title":"publish","text":""},{"location":"autoapi/client/ayon_openrv/plugins/publish/collect_workfile.html","title":"collect_workfile","text":""},{"location":"autoapi/client/ayon_openrv/plugins/publish/collect_workfile.html#client.ayon_openrv.plugins.publish.collect_workfile.CollectWorkfile","title":"<code>CollectWorkfile</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Inject the current working file into context</p> Source code in <code>client/ayon_openrv/plugins/publish/collect_workfile.py</code> <pre><code>class CollectWorkfile(pyblish.api.InstancePlugin):\n    \"\"\"Inject the current working file into context\"\"\"\n\n    order = pyblish.api.CollectorOrder - 0.49\n    label = \"OpenRV Session Workfile\"\n    hosts = [\"openrv\"]\n    families = [\"workfile\"]\n\n    def process(self, instance):\n        \"\"\"Inject the current working file\"\"\"\n\n        host = registered_host()\n        current_file = host.get_current_workfile() or \"\"\n\n        folder, file = os.path.split(current_file)\n        filename, ext = os.path.splitext(file)\n\n        instance.context.data[\"currentFile\"] = current_file\n\n        if not current_file:\n            self.log.error(\"No current filepath detected. \"\n                           \"Make sure to save your OpenRV session\")\n            return\n\n        instance.data[\"representations\"] = [{\n            \"name\": ext.lstrip(\".\"),\n            \"ext\": ext.lstrip(\".\"),\n            \"files\": file,\n            \"stagingDir\": folder,\n        }]\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/publish/collect_workfile.html#client.ayon_openrv.plugins.publish.collect_workfile.CollectWorkfile.process","title":"<code>process(instance)</code>","text":"<p>Inject the current working file</p> Source code in <code>client/ayon_openrv/plugins/publish/collect_workfile.py</code> <pre><code>def process(self, instance):\n    \"\"\"Inject the current working file\"\"\"\n\n    host = registered_host()\n    current_file = host.get_current_workfile() or \"\"\n\n    folder, file = os.path.split(current_file)\n    filename, ext = os.path.splitext(file)\n\n    instance.context.data[\"currentFile\"] = current_file\n\n    if not current_file:\n        self.log.error(\"No current filepath detected. \"\n                       \"Make sure to save your OpenRV session\")\n        return\n\n    instance.data[\"representations\"] = [{\n        \"name\": ext.lstrip(\".\"),\n        \"ext\": ext.lstrip(\".\"),\n        \"files\": file,\n        \"stagingDir\": folder,\n    }]\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/publish/extract_save_scene.html","title":"extract_save_scene","text":""},{"location":"autoapi/client/ayon_openrv/plugins/publish/extract_save_scene.html#client.ayon_openrv.plugins.publish.extract_save_scene.ExtractSaveScene","title":"<code>ExtractSaveScene</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Save scene before extraction.</p> Source code in <code>client/ayon_openrv/plugins/publish/extract_save_scene.py</code> <pre><code>class ExtractSaveScene(pyblish.api.ContextPlugin):\n    \"\"\"Save scene before extraction.\"\"\"\n\n    order = pyblish.api.ExtractorOrder - 0.48\n    label = \"Extract Save Scene\"\n    hosts = [\"openrv\"]\n\n    def process(self, context):\n        host = registered_host()\n\n        current_file_name = host.get_current_workfile()\n        self.log.info(\"current_file_name::{}\".format(current_file_name))\n        if not current_file_name:\n            raise KnownPublishError(\"Scene not saved, use Workfile app \"\n                                    \"to save first!\")\n        host.save_workfile(current_file_name)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/publish/increment_workfile.html","title":"increment_workfile","text":""},{"location":"autoapi/client/ayon_openrv/plugins/publish/increment_workfile.html#client.ayon_openrv.plugins.publish.increment_workfile.IncrementWorkfile","title":"<code>IncrementWorkfile</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Increment the current workfile.</p> <p>Saves the current scene with an increased version number.</p> Source code in <code>client/ayon_openrv/plugins/publish/increment_workfile.py</code> <pre><code>class IncrementWorkfile(pyblish.api.InstancePlugin):\n    \"\"\"Increment the current workfile.\n\n    Saves the current scene with an increased version number.\n    \"\"\"\n\n    label = \"Increment Workfile\"\n    order = pyblish.api.IntegratorOrder + 9.0\n    hosts = [\"openrv\"]\n    families = [\"workfile\"]\n    optional = True\n\n    def process(self, instance):\n        errored_plugins = get_errored_plugins_from_context(instance.context)\n        if errored_plugins:\n            raise RuntimeError(\n                \"Skipping incrementing current file because publishing failed.\"\n            )\n\n        context = instance.context\n        current_filepath = instance.context.data[\"currentFile\"]\n        host = registered_host()\n        try:\n            from ayon_core.pipeline.workfile import save_next_version\n            from ayon_core.host.interfaces import SaveWorkfileOptionalData\n\n            current_filename = os.path.basename(current_filepath)\n            save_next_version(\n                description=(\n                    f\"Incremented by publishing from {current_filename}\"\n                ),\n                # Optimize the save by reducing needed queries for context\n                prepared_data=SaveWorkfileOptionalData(\n                    project_entity=context.data[\"projectEntity\"],\n                    project_settings=context.data[\"project_settings\"],\n                    anatomy=context.data[\"anatomy\"],\n                )\n            )\n            new_filepath = host.get_current_workfile()\n\n        except ImportError:\n            # Backwards compatibility before ayon-core 1.5.0\n            self.log.debug(\n                \"Using legacy `version_up`. Update AYON core addon to \"\n                \"use newer `save_next_version` function.\"\n            )\n            new_filepath = version_up(current_filepath)\n            host.save_workfile(new_filepath)\n\n        self.log.info(f\"Incremented workfile to: {new_filepath}\")\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/plugins/publish/validate_workfile.html","title":"validate_workfile","text":""},{"location":"autoapi/client/ayon_openrv/plugins/publish/validate_workfile.html#client.ayon_openrv.plugins.publish.validate_workfile.ValidateCurrentWorkFile","title":"<code>ValidateCurrentWorkFile</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>There must be workfile to publish.</p> Source code in <code>client/ayon_openrv/plugins/publish/validate_workfile.py</code> <pre><code>class ValidateCurrentWorkFile(pyblish.api.InstancePlugin):\n    \"\"\"There must be workfile to publish.\"\"\"\n\n    label = \"Validate Workfile\"\n    order = pyblish.api.ValidatorOrder - 0.1\n    hosts = [\"openrv\"]\n    families = [\"workfile\"]\n\n    def process(self, instance):\n        current_file = instance.context.data[\"currentFile\"]\n        if not current_file:\n            raise PublishValidationError(\"There is no workfile to publish.\")\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/index.html","title":"startup","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/index.html","title":"pkgs_source","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_menus/index.html","title":"ayon_menus","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_menus/ayon_menus.html","title":"ayon_menus","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/index.html","title":"ayon_scripteditor","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/ayon_scripteditor.html","title":"ayon_scripteditor","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/ayon_scripteditor.html#client.ayon_openrv.startup.pkgs_source.ayon_scripteditor.ayon_scripteditor.AYONMenus","title":"<code>AYONMenus</code>","text":"<p>               Bases: <code>MinorMode</code></p> Source code in <code>client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/ayon_scripteditor.py</code> <pre><code>class AYONMenus(MinorMode):\n\n    def __init__(self):\n        MinorMode.__init__(self)\n        self.init(\n            name=\"py-ayon-scripteditor\",\n            globalBindings=None,\n            overrideBindings=None,\n            menu=[\n                # Menu name\n                # NOTE: If it already exists it will merge with existing\n                # and add submenus / menuitems to the existing one\n                (\"Tools\", [\n                    # Menuitem name, actionHook (event), key, stateHook\n                    (\n                        \"Script Editor\",\n                        self.show_scripteditor,\n                        None,\n                        self.is_active\n                    ),\n                ])\n            ],\n            # initialization order\n            sortKey=\"source_setup\",\n            ordering=25\n        )\n\n        self._widget = None\n\n    @property\n    def _parent(self):\n        return rv.qtutils.sessionWindow()\n\n    def show_scripteditor(self, event):\n        \"\"\"Show the console - create if not exists\"\"\"\n        if self._widget is not None:\n            if self._widget.isVisible():\n                # Closing also saves the scripts directly.\n                # Thus we prefer to close instead of hide here\n                self._widget.close()\n                return\n            else:\n                self._widget.show()\n                self._widget.raise_()\n                return\n\n        widget = ConsoleInterpreterWindow(parent=self._parent)\n        widget.setWindowTitle(\"Python Script Editor - OpenRV\")\n        widget.setWindowFlags(widget.windowFlags() |\n                              QtCore.Qt.Dialog |\n                              QtCore.Qt.WindowMinimizeButtonHint)\n        widget.show()\n        widget.raise_()\n\n        self._widget = widget\n\n    def is_active(self):\n        if self._widget is not None and self._widget.isVisible():\n            return rv.commands.CheckedMenuState\n        else:\n            return rv.commands.UncheckedMenuState\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/ayon_scripteditor.html#client.ayon_openrv.startup.pkgs_source.ayon_scripteditor.ayon_scripteditor.AYONMenus.show_scripteditor","title":"<code>show_scripteditor(event)</code>","text":"<p>Show the console - create if not exists</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/ayon_scripteditor/ayon_scripteditor.py</code> <pre><code>def show_scripteditor(self, event):\n    \"\"\"Show the console - create if not exists\"\"\"\n    if self._widget is not None:\n        if self._widget.isVisible():\n            # Closing also saves the scripts directly.\n            # Thus we prefer to close instead of hide here\n            self._widget.close()\n            return\n        else:\n            self._widget.show()\n            self._widget.raise_()\n            return\n\n    widget = ConsoleInterpreterWindow(parent=self._parent)\n    widget.setWindowTitle(\"Python Script Editor - OpenRV\")\n    widget.setWindowFlags(widget.windowFlags() |\n                          QtCore.Qt.Dialog |\n                          QtCore.Qt.WindowMinimizeButtonHint)\n    widget.show()\n    widget.raise_()\n\n    self._widget = widget\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/index.html","title":"comments","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html","title":"comments","text":""},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.ReviewMenu","title":"<code>ReviewMenu</code>","text":"<p>               Bases: <code>MinorMode</code></p> <p>Review menu for viewing and annotating frames with status and comments.</p> <p>Creates a dockable widget for RV adding review specific functionality like status management, commenting, and frame annotations. It attaches to the AYON menu and provides controls for navigating through annotated frames and managing review metadata.</p> <p>The widget displays: - Shot name and status - Review comment field - Annotation navigation controls - Image export functionality</p> <p>It stores review status and comments as metadata on the source node using the AYON attribute prefix. The widget is designed to be used in conjunction with the AYON pipeline.</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>class ReviewMenu(MinorMode):\n    \"\"\"Review menu for viewing and annotating frames with status and comments.\n\n    Creates a dockable widget for RV adding review specific functionality like\n    status management, commenting, and frame annotations. It attaches to\n    the AYON menu and provides controls for navigating through annotated\n    frames and managing review metadata.\n\n    The widget displays:\n    - Shot name and status\n    - Review comment field\n    - Annotation navigation controls\n    - Image export functionality\n\n    It stores review status and comments as metadata on the source node using\n    the AYON attribute prefix. The widget is designed to be used in\n    conjunction with the AYON pipeline.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        MinorMode.__init__(self)\n        self.log = logging.getLogger(\"ReviewMenu\")\n        self.log.setLevel(logging.INFO)\n\n        bindings = [\n            (\n                \"frame-changed\",\n                self.on_frame_changed,\n                \"Update UI on frame change\",\n            ),\n            (\n                \"source-group-complete\",\n                self.update_ui_attribs,\n                \"Update UI on new source\",\n            ),\n            (\n                \"graph-node-inputs-changed\",\n                self.graph_change,\n                \"Update UI on graph node inputs changed\",\n            )\n        ]\n\n        self.init(\n            \"py-ReviewMenu-mode\",\n            bindings,\n            None,\n            [\n                (\n                    \"AYON\",\n                    [\n                        (\"_\", None),  # separator\n                        (\"Review\", self.runme, None, self._is_active),\n                    ],\n                )\n            ],\n            # initialization order\n            sortKey=\"source_setup\",\n            ordering=20,\n        )\n\n        # spacers\n        self.verticalSpacer = QtWidgets.QSpacerItem(\n            20, 40,\n            QtWidgets.QSizePolicy.Minimum,\n            QtWidgets.QSizePolicy.Expanding\n        )\n        self.verticalSpacerMin = QtWidgets.QSpacerItem(\n            2, 2,\n            QtWidgets.QSizePolicy.Minimum,\n            QtWidgets.QSizePolicy.Minimum\n        )\n        self.horizontalSpacer = QtWidgets.QSpacerItem(\n            40, 10,\n            QtWidgets.QSizePolicy.Expanding,\n            QtWidgets.QSizePolicy.Minimum\n        )\n        self.customDockWidget = QtWidgets.QWidget()\n\n        # data\n        self.current_loaded_viewnode = None\n        self.review_main_layout = QtWidgets.QVBoxLayout()\n        self.rev_head_label = QtWidgets.QLabel(\"Shot Review\")\n        self.set_item_font(self.rev_head_label, size=16)\n        self.rev_head_name = QtWidgets.QLabel(\"Shot Name\")\n        self.current_loaded_shot = QtWidgets.QLabel(\"\")\n        self.current_shot_status = QtWidgets.QComboBox()\n        self.current_shot_status.addItems([\n            \"In Review\", \"Ready For Review\", \"Reviewed\", \"Approved\", \"Deliver\"\n        ])\n        self.current_shot_comment = QtWidgets.QPlainTextEdit()\n        self.current_shot_comment.setStyleSheet(\n            \"color: white; background-color: black\"\n        )\n\n        self.review_main_layout_head = QtWidgets.QVBoxLayout()\n        self.review_main_layout_head.addWidget(self.rev_head_label)\n        self.review_main_layout_head.addWidget(self.rev_head_name)\n        self.review_main_layout_head.addWidget(self.current_loaded_shot)\n        self.review_main_layout_head.addWidget(self.current_shot_status)\n        self.review_main_layout_head.addWidget(self.current_shot_comment)\n\n        self.get_view_image = QtWidgets.QPushButton(\"Export frame as image\")\n        self.review_main_layout_head.addWidget(self.get_view_image)\n\n        self.remove_cmnt_status_btn = QtWidgets.QPushButton(\"Remove comment and status\")  # noqa\n        self.review_main_layout_head.addWidget(self.remove_cmnt_status_btn)\n\n        self.rvWindow = None\n        self.dockWidget = None\n\n        # annotations controls\n        self.notes_layout = QtWidgets.QVBoxLayout()\n        self.notes_layout_label = QtWidgets.QLabel(\"Annotations\")\n        self.btn_note_prev = QtWidgets.QPushButton(\"Previous Annotation\")\n        self.btn_note_next = QtWidgets.QPushButton(\"Next Annotation\")\n        self.notes_layout.addWidget(self.notes_layout_label)\n        self.notes_layout.addWidget(self.btn_note_prev)\n        self.notes_layout.addWidget(self.btn_note_next)\n\n        self.review_main_layout.addLayout(self.review_main_layout_head)\n        self.review_main_layout.addLayout(self.notes_layout)\n        self.review_main_layout.addStretch(1)\n        self.customDockWidget.setLayout(self.review_main_layout)\n\n        # signals\n        self.current_shot_status.currentTextChanged.connect(self.setup_combo_status)  # noqa\n        self.current_shot_comment.textChanged.connect(self.comment_update)\n        self.get_view_image.clicked.connect(self.get_gui_image)\n        self.remove_cmnt_status_btn.clicked.connect(self.clean_cmnt_status)\n        self.btn_note_prev.clicked.connect(self.annotate_prev)\n        self.btn_note_next.clicked.connect(self.annotate_next)\n\n    def runme(self, arg1=None, arg2=None):\n        self.rvWindow = rv.qtutils.sessionWindow()\n        if self.dockWidget is None:\n            # Create DockWidget and add the Custom Widget on first run\n            self.dockWidget = QtWidgets.QDockWidget(\"AYON Review\",\n                                                    self.rvWindow)\n            self.dockWidget.setWidget(self.customDockWidget)\n\n            # Dock widget to the RV MainWindow\n            self.rvWindow.addDockWidget(QtCore.Qt.RightDockWidgetArea,\n                                        self.dockWidget)\n\n            self.on_frame_changed(None)\n        else:\n            # Toggle visibility state\n            self.dockWidget.toggleViewAction().trigger()\n            self.on_frame_changed(None)\n\n    def _is_active(self):\n        if self.dockWidget is not None and self.dockWidget.isVisible():\n            return rv.commands.CheckedMenuState\n        else:\n            return rv.commands.UncheckedMenuState\n\n    def set_item_font(self, item, size=14, bold=True):\n        font = QtGui.QFont()\n        if bold:\n            font.setFamily(\"Arial Bold\")\n        else:\n            font.setFamily(\"Arial\")\n        font.setPointSize(size)\n        font.setBold(True)\n        item.setFont(font)\n\n    def on_frame_changed(self, event=None):\n        \"\"\"Handler for when the active clip/source changes\"\"\"\n        if event is not None:\n            # If the event is not None, it means the frame has changed\n            self.log.debug(f\"on_frame_changed: event={event.name()} | {event.contents()}\")\n\n        # Get the new active source/clip\n        self.get_view_source()\n\n        # Update the UI to reflect the new clip\n        self.update_ui_attribs(event)\n\n    def graph_change(self, event=None):\n        self.log.debug(\"graph_change\")\n        # Get the new active source/clip\n        self.get_view_source()\n\n        # Update the UI to reflect the new clip\n        self.update_ui_attribs(event)\n\n    def get_view_source(self):\n        try:\n            sources = rv.commands.sourcesAtFrame(rv.commands.frame())\n            self.current_loaded_viewnode = (\n                sources[0] if sources and len(sources) &gt; 0 else None)\n            self.log.debug(f\"get_view_source: {self.current_loaded_viewnode}\")\n        except Exception as e:\n            self.log.error(f\"Error getting sources: {e}\")\n            self.current_loaded_viewnode = None\n\n    def update_ui_attribs(self, event=None):\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"update_ui_attribs: {node}\")\n        # Use namespace as loaded shot label\n        namespace = \"\"\n        if node is not None:\n            property_name = f\"{node}.{AYON_ATTR_PREFIX}namespace\"\n            self.log.debug(f\"property_name: {property_name}\")\n            if rv.commands.propertyExists(property_name):\n                namespace = rv.commands.getStringProperty(property_name)[0]\n\n        self.current_loaded_shot.setText(namespace)\n\n        self.setup_properties()\n        self.get_comment()\n\n    def setup_combo_status(self):\n        # setup properties\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"setup_combo_status: {node}\")\n        if node is None:\n            return\n\n        att_prop = f\"{node}.{AYON_ATTR_PREFIX}task_status\"\n        status = self.current_shot_status.currentText()\n\n         # Check if property exists, create it if it doesn't\n        if not rv.commands.propertyExists(att_prop):\n            rv.commands.newProperty(att_prop, rv.commands.StringType, 1)\n\n        rv.commands.setStringProperty(att_prop, [str(status)], True)\n        self.current_shot_comment.setFocus()\n\n        self.current_shot_status.setCurrentText(status)\n\n    def setup_properties(self):\n        # setup properties\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"setup_properties: {node}\")\n        if node is None:\n            self.current_shot_status.setCurrentIndex(0)\n            return\n\n        att_prop = f\"{node}.{AYON_ATTR_PREFIX}task_status\"\n        if not rv.commands.propertyExists(att_prop):\n            status = \"In Review\"\n            rv.commands.newProperty(att_prop, rv.commands.StringType, 1)\n            rv.commands.setStringProperty(att_prop, [str(status)], True)\n            self.current_shot_status.setCurrentIndex(0)\n        else:\n            status = rv.commands.getStringProperty(att_prop)[0]\n            self.current_shot_status.setCurrentText(status)\n\n    def comment_update(self):\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"comment_update: {node}\")\n        if node is None:\n            return\n\n        comment = self.current_shot_comment.toPlainText()\n        att_prop = f\"{node}.{AYON_ATTR_PREFIX}task_comment\"\n        rv.commands.newProperty(att_prop, rv.commands.StringType, 1)\n        rv.commands.setStringProperty(att_prop, [str(comment)], True)\n\n    def get_comment(self):\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"get_comment: {node}\")\n        if node is None:\n            self.current_shot_comment.setPlainText(\"\")\n            return\n\n        att_prop = f\"{node}.{AYON_ATTR_PREFIX}task_comment\"\n        if not rv.commands.propertyExists(att_prop):\n            rv.commands.newProperty(att_prop, rv.commands.StringType, 1)\n            rv.commands.setStringProperty(att_prop, [\"\"], True)\n        else:\n            status = rv.commands.getStringProperty(att_prop)[0]\n            self.current_shot_comment.setPlainText(status)\n\n    def clean_cmnt_status(self):\n        node = self.current_loaded_viewnode\n        self.log.debug(f\"clean_cmnt_status: {node}\")\n\n        for prop in [\n            f\"{node}.{AYON_ATTR_PREFIX}task_comment\",\n            f\"{node}.{AYON_ATTR_PREFIX}task_status\",\n        ]:\n            self.log.debug(f\"prop: {prop}\")\n            if not rv.commands.propertyExists(prop):\n                rv.commands.newProperty(prop, rv.commands.StringType, 1)\n            rv.commands.setStringProperty(prop, [\"\"], True)\n\n        self.current_shot_status.setCurrentText(\"In Review\")\n        self.current_shot_comment.setPlainText(\"\")\n\n    def get_gui_image(self, filename=None):\n        current_attributes = OrderedDict(rv.commands.getCurrentAttributes())\n        frame_number = rv.commands.frame()\n        current_frame = current_attributes.get(\"SourceFrame\", frame_number)\n        current_file_path = Path(current_attributes.get(\"File\", \"Image.png\"))\n\n        current_frame_name = current_file_path.stem\n        if current_frame not in current_frame_name:\n            current_frame_name = f\"{current_frame_name}.{current_frame}\"\n\n        if not filename:\n            # Allow user to pick filename\n            filename, _ = QtWidgets.QFileDialog.getSaveFileName(\n                self.customDockWidget,\n                \"Save image\",\n                f\"annotate_{current_frame_name}.png\",\n                \"Images (*.png *.jpg *.jpeg *.exr)\"\n            )\n            if not filename:\n                # User cancelled\n                return\n\n        rv.commands.exportCurrentFrame(filename)\n        print(\"Current frame exported to: {}\".format(filename))\n\n    def annotate_next(self):\n        \"\"\"Set frame to next annotated frame\"\"\"\n        all_notes = self.get_annotated_for_view()\n        if not all_notes:\n            return\n        nxt = get_cycle_frame(frame=rv.commands.frame(),\n                              frames_lookup=all_notes,\n                              direction=\"next\")\n\n        rv.commands.setFrame(int(nxt))\n        rv.commands.redraw()\n\n    def annotate_prev(self):\n        \"\"\"Set frame to previous annotated frame\"\"\"\n        all_notes = self.get_annotated_for_view()\n        if not all_notes:\n            return\n        previous = get_cycle_frame(frame=rv.commands.frame(),\n                                   frames_lookup=all_notes,\n                                   direction=\"prev\")\n        rv.commands.setFrame(int(previous))\n        rv.commands.redraw()\n\n    def get_annotated_for_view(self):\n        \"\"\"Return the frame numbers for all annotated frames\"\"\"\n        annotated_frames = rv.extra_commands.findAnnotatedFrames()\n        return annotated_frames\n\n    def get_task_status(self):\n        import ftrack_api\n        session = ftrack_api.Session(auto_connect_event_hub=False)\n        self.log.debug(\"Ftrack user: \\\"{0}\\\"\".format(session.api_user))\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.ReviewMenu.annotate_next","title":"<code>annotate_next()</code>","text":"<p>Set frame to next annotated frame</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>def annotate_next(self):\n    \"\"\"Set frame to next annotated frame\"\"\"\n    all_notes = self.get_annotated_for_view()\n    if not all_notes:\n        return\n    nxt = get_cycle_frame(frame=rv.commands.frame(),\n                          frames_lookup=all_notes,\n                          direction=\"next\")\n\n    rv.commands.setFrame(int(nxt))\n    rv.commands.redraw()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.ReviewMenu.annotate_prev","title":"<code>annotate_prev()</code>","text":"<p>Set frame to previous annotated frame</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>def annotate_prev(self):\n    \"\"\"Set frame to previous annotated frame\"\"\"\n    all_notes = self.get_annotated_for_view()\n    if not all_notes:\n        return\n    previous = get_cycle_frame(frame=rv.commands.frame(),\n                               frames_lookup=all_notes,\n                               direction=\"prev\")\n    rv.commands.setFrame(int(previous))\n    rv.commands.redraw()\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.ReviewMenu.get_annotated_for_view","title":"<code>get_annotated_for_view()</code>","text":"<p>Return the frame numbers for all annotated frames</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>def get_annotated_for_view(self):\n    \"\"\"Return the frame numbers for all annotated frames\"\"\"\n    annotated_frames = rv.extra_commands.findAnnotatedFrames()\n    return annotated_frames\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.ReviewMenu.on_frame_changed","title":"<code>on_frame_changed(event=None)</code>","text":"<p>Handler for when the active clip/source changes</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>def on_frame_changed(self, event=None):\n    \"\"\"Handler for when the active clip/source changes\"\"\"\n    if event is not None:\n        # If the event is not None, it means the frame has changed\n        self.log.debug(f\"on_frame_changed: event={event.name()} | {event.contents()}\")\n\n    # Get the new active source/clip\n    self.get_view_source()\n\n    # Update the UI to reflect the new clip\n    self.update_ui_attribs(event)\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/startup/pkgs_source/comments/comments.html#client.ayon_openrv.startup.pkgs_source.comments.comments.get_cycle_frame","title":"<code>get_cycle_frame(frame=None, frames_lookup=None, direction='next')</code>","text":"<p>Cycle through frames in a lookup list, returning the nearest frame.</p> <p>This function finds the frame in <code>frames_lookup</code> that is closest to the given <code>frame</code> in the specified <code>direction</code>. If no frame exists in the specified direction, it cycles to the other end of the list.</p> Note <p>Returns None if <code>frames_lookup</code> is empty.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>The frame number to start the search from.</p> <code>None</code> <code>frames_lookup</code> <code>list[int]</code> <p>A list of frame numbers to search within.</p> <code>None</code> <code>direction</code> <code>str</code> <p>The direction to search, either \"next\" or \"prev\". Defaults to \"next\".</p> <code>'next'</code> <p>Returns:</p> Type Description <p>int or None: The nearest frame number in the specified direction, or None if <code>frames_lookup</code> is empty.</p> Source code in <code>client/ayon_openrv/startup/pkgs_source/comments/comments.py</code> <pre><code>def get_cycle_frame(frame=None, frames_lookup=None, direction=\"next\"):\n    \"\"\"Cycle through frames in a lookup list, returning the nearest frame.\n\n    This function finds the frame in `frames_lookup` that is closest to the\n    given `frame` in the specified `direction`. If no frame exists in the\n    specified direction, it cycles to the other end of the list.\n\n    Note:\n        Returns None if `frames_lookup` is empty.\n\n    Args:\n        frame (int): The frame number to start the search from.\n        frames_lookup (list[int]): A list of frame numbers to search within.\n        direction (str): The direction to search, either \"next\" or \"prev\".\n            Defaults to \"next\".\n\n    Returns:\n        int or None: The nearest frame number in the specified direction,\n            or None if `frames_lookup` is empty.\n    \"\"\"\n    if direction not in {\"prev\", \"next\"}:\n        raise ValueError(\"Direction must be either 'next' or 'prev'. \"\n                         \"Got: {}\".format(direction))\n\n    if not frames_lookup:\n        return\n\n    elif len(frames_lookup) == 1:\n        return frames_lookup[0]\n\n    # We require the sorting of the lookup frames because we pass e.g. the\n    # result of `rv.extra_commands.findAnnotatedFrames()` as lookup frames\n    # which according to its documentations states:\n    # The array is not sorted and some frames may appear more than once.\n    frames_lookup = list(sorted(frames_lookup))\n    if direction == \"next\":\n        # Return next nearest number or cycle to the lowest number\n        return next((i for i in frames_lookup if i &gt; frame),\n                    frames_lookup[0])\n    elif direction == \"prev\":\n        # Return previous nearest number or cycle to the highest number\n        return next((i for i in reversed(frames_lookup) if i &lt; frame),\n                    frames_lookup[-1])\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/index.html","title":"typing","text":"<p>Type hints for RV API.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/index.html","title":"rv","text":"<p>Type hints for RV API.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/commands/index.html","title":"commands","text":"<p>Type hints for rv.commands module.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html","title":"extra_commands","text":"<p>Type hints for rv.extra_commands module.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.activatePackageModeEntry","title":"<code>activatePackageModeEntry(packageName, modeName)</code>","text":"<p>Activates a specific mode entry within a package.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def activatePackageModeEntry(packageName: str, modeName: str) -&gt; None:\n    \"\"\"\n    Activates a specific mode entry within a package.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.activateSync","title":"<code>activateSync(connectionName)</code>","text":"<p>Activates synchronization with a remote connection.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def activateSync(connectionName: str) -&gt; None:\n    \"\"\"\n    Activates synchronization with a remote connection.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.appendToProp","title":"<code>appendToProp(nodeName, propName, value)</code>","text":"<p>Appends a value to a node property.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def appendToProp(nodeName: str, propName: str, value: Any) -&gt; None:\n    \"\"\"\n    Appends a value to a node property.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.associatedNode","title":"<code>associatedNode(nodeName, associationType)</code>","text":"<p>Gets an associated node of a specific type.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def associatedNode(nodeName: str, associationType: str) -&gt; Optional[str]:\n    \"\"\"\n    Gets an associated node of a specific type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.associatedNodes","title":"<code>associatedNodes(nodeName, associationType)</code>","text":"<p>Gets all associated nodes of a specific type.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def associatedNodes(nodeName: str, associationType: str) -&gt; List[str]:\n    \"\"\"\n    Gets all associated nodes of a specific type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.associatedVideoDevice","title":"<code>associatedVideoDevice(sourceNode)</code>","text":"<p>Gets the associated video device for a source node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def associatedVideoDevice(sourceNode: str) -&gt; str:\n    \"\"\"\n    Gets the associated video device for a source node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.cacheUsage","title":"<code>cacheUsage()</code>","text":"<p>Gets information about cache usage.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def cacheUsage() -&gt; Dict[str, Any]:\n    \"\"\"\n    Gets information about cache usage.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.centerResizeFit","title":"<code>centerResizeFit()</code>","text":"<p>Centers the view and resizes to fit the current image.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def centerResizeFit() -&gt; None:\n    \"\"\"\n    Centers the view and resizes to fit the current image.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.cprop","title":"<code>cprop(nodeName, propName)</code>","text":"<p>Gets a property value as a string (convenience function).</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def cprop(nodeName: str, propName: str) -&gt; str:\n    \"\"\"\n    Gets a property value as a string (convenience function).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.currentImageAspect","title":"<code>currentImageAspect()</code>","text":"<p>Gets the aspect ratio of the current image.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def currentImageAspect() -&gt; float:\n    \"\"\"\n    Gets the aspect ratio of the current image.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.cycleNodeInputs","title":"<code>cycleNodeInputs(nodeName)</code>","text":"<p>Cycles through the inputs of a node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def cycleNodeInputs(nodeName: str) -&gt; None:\n    \"\"\"\n    Cycles through the inputs of a node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.deactivatePackageModeEntry","title":"<code>deactivatePackageModeEntry(packageName, modeName)</code>","text":"<p>Deactivates a specific mode entry within a package.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def deactivatePackageModeEntry(packageName: str, modeName: str) -&gt; None:\n    \"\"\"\n    Deactivates a specific mode entry within a package.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.deleteAnnotation","title":"<code>deleteAnnotation(frame)</code>","text":"<p>Delete the annotation for a specific frame.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>The frame number.</p> required Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def deleteAnnotation(frame: int) -&gt; None:\n    \"\"\"\n    Delete the annotation for a specific frame.\n\n    Args:\n        frame (int): The frame number.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.displayFeedback","title":"<code>displayFeedback(message)</code>","text":"<p>Displays feedback message (older version, displayFeedback2 preferred).</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def displayFeedback(message: str) -&gt; None:\n    \"\"\"\n    Displays feedback message (older version, displayFeedback2 preferred).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.displayFeedback2","title":"<code>displayFeedback2(message, duration=2.0)</code>","text":"<p>Displays feedback message in the UI.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def displayFeedback2(message: str, duration: float = 2.0) -&gt; None:\n    \"\"\"\n    Displays feedback message in the UI.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.existsInProp","title":"<code>existsInProp(nodeName, propName, value)</code>","text":"<p>Checks if a value exists in a node property.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def existsInProp(nodeName: str, propName: str, value: Any) -&gt; bool:\n    \"\"\"\n    Checks if a value exists in a node property.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.findAnnotatedFrames","title":"<code>findAnnotatedFrames()</code>","text":"<p>Return a list of frame numbers that have annotations.</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]: A list of frame numbers with annotations.</p> <code>List[int]</code> <p>The array is not sorted and some frames may appear more than once.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def findAnnotatedFrames() -&gt; List[int]:\n    \"\"\"\n    Return a list of frame numbers that have annotations.\n\n    Returns:\n        List[int]: A list of frame numbers with annotations.\n        The array is not sorted and some frames may appear more than once.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.frameImage","title":"<code>frameImage()</code>","text":"<p>Frames the current image in the view.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def frameImage() -&gt; None:\n    \"\"\"\n    Frames the current image in the view.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.getAllNodesOfType","title":"<code>getAllNodesOfType(nodeType)</code>","text":"<p>Find all nodes of a specific type in the entire session.</p> <p>Parameters:</p> Name Type Description Default <code>nodeType</code> <code>str</code> <p>The type of node to search for.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of node names of the specified type.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def getAllNodesOfType(nodeType: str) -&gt; List[str]:\n    \"\"\"\n    Find all nodes of a specific type in the entire session.\n\n    Args:\n        nodeType (str): The type of node to search for.\n\n    Returns:\n        List[str]: A list of node names of the specified type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.getAnnotationText","title":"<code>getAnnotationText(frame)</code>","text":"<p>Get the annotation text for a specific frame.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>The frame number.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The annotation text for the frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def getAnnotationText(frame: int) -&gt; str:\n    \"\"\"\n    Get the annotation text for a specific frame.\n\n    Args:\n        frame (int): The frame number.\n\n    Returns:\n        str: The annotation text for the frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.getAnnotations","title":"<code>getAnnotations()</code>","text":"<p>Get all annotations in the current session.</p> <p>Returns:</p> Type Description <code>Dict[int, str]</code> <p>Dict[int, str]: A dictionary mapping frame numbers to annotation text.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def getAnnotations() -&gt; Dict[int, str]:\n    \"\"\"\n    Get all annotations in the current session.\n\n    Returns:\n        Dict[int, str]: A dictionary mapping frame numbers to annotation text.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.getGroupNodesOfType","title":"<code>getGroupNodesOfType(groupNode, nodeType, recursive=False)</code>","text":"<p>Find nodes of a specific type within a group, optionally recursively.</p> <p>Parameters:</p> Name Type Description Default <code>groupNode</code> <code>str</code> <p>The group node to search in.</p> required <code>nodeType</code> <code>str</code> <p>The type of node to search for.</p> required <code>recursive</code> <code>bool</code> <p>Whether to search recursively in subgroups.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of node names of the specified type.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def getGroupNodesOfType(groupNode: str, nodeType: str, recursive: bool = False) -&gt; List[str]:\n    \"\"\"\n    Find nodes of a specific type within a group, optionally recursively.\n\n    Args:\n        groupNode (str): The group node to search in.\n        nodeType (str): The type of node to search for.\n        recursive (bool, optional): Whether to search recursively in subgroups.\n\n    Returns:\n        List[str]: A list of node names of the specified type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.inputNodeUserNameAtFrame","title":"<code>inputNodeUserNameAtFrame(nodeName, frame, userName)</code>","text":"<p>Gets the input node user name at a specific frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def inputNodeUserNameAtFrame(nodeName: str, frame: int, userName: str) -&gt; str:\n    \"\"\"\n    Gets the input node user name at a specific frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isFrameMarked","title":"<code>isFrameMarked(frame)</code>","text":"<p>Check if a specific frame is marked.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>The frame number to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the frame is marked, False otherwise.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isFrameMarked(frame: int) -&gt; bool:\n    \"\"\"\n    Check if a specific frame is marked.\n\n    Args:\n        frame (int): The frame number to check.\n\n    Returns:\n        bool: True if the frame is marked, False otherwise.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isNarrowed","title":"<code>isNarrowed()</code>","text":"<p>Checks if the view is narrowed to a range.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isNarrowed() -&gt; bool:\n    \"\"\"\n    Checks if the view is narrowed to a range.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isPlayable","title":"<code>isPlayable()</code>","text":"<p>Checks if the current session is playable.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isPlayable() -&gt; bool:\n    \"\"\"\n    Checks if the current session is playable.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isPlayingBackwards","title":"<code>isPlayingBackwards()</code>","text":"<p>Checks if playback is currently moving backwards.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isPlayingBackwards() -&gt; bool:\n    \"\"\"\n    Checks if playback is currently moving backwards.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isPlayingForwards","title":"<code>isPlayingForwards()</code>","text":"<p>Checks if playback is currently moving forwards.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isPlayingForwards() -&gt; bool:\n    \"\"\"\n    Checks if playback is currently moving forwards.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isSessionEmpty","title":"<code>isSessionEmpty()</code>","text":"<p>Checks if the current session is empty.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isSessionEmpty() -&gt; bool:\n    \"\"\"\n    Checks if the current session is empty.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.isViewNode","title":"<code>isViewNode(nodeName)</code>","text":"<p>Checks if a node is the current view node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def isViewNode(nodeName: str) -&gt; bool:\n    \"\"\"\n    Checks if a node is the current view node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.loadCurrentSourcesChangedFrames","title":"<code>loadCurrentSourcesChangedFrames()</code>","text":"<p>Loads changed frames for current sources.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def loadCurrentSourcesChangedFrames() -&gt; None:\n    \"\"\"\n    Loads changed frames for current sources.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.markFrameEnd","title":"<code>markFrameEnd()</code>","text":"<p>Get the end frame of the current mark range.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The end frame of the mark range.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def markFrameEnd() -&gt; int:\n    \"\"\"\n    Get the end frame of the current mark range.\n\n    Returns:\n        int: The end frame of the mark range.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.markFrameStart","title":"<code>markFrameStart()</code>","text":"<p>Get the start frame of the current mark range.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The start frame of the mark range.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def markFrameStart() -&gt; int:\n    \"\"\"\n    Get the start frame of the current mark range.\n\n    Returns:\n        int: The start frame of the mark range.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.minorModeIsLoaded","title":"<code>minorModeIsLoaded(modeName)</code>","text":"<p>Checks if a minor mode is loaded.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def minorModeIsLoaded(modeName: str) -&gt; bool:\n    \"\"\"\n    Checks if a minor mode is loaded.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.nodesInEvalPath","title":"<code>nodesInEvalPath(nodeName)</code>","text":"<p>Finds nodes in the evaluation path of a given node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def nodesInEvalPath(nodeName: str) -&gt; List[str]:\n    \"\"\"\n    Finds nodes in the evaluation path of a given node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.nodesInGroupOfType","title":"<code>nodesInGroupOfType(groupNode, nodeType)</code>","text":"<p>Find all nodes of a specific type within a group.</p> <p>Parameters:</p> Name Type Description Default <code>groupNode</code> <code>str</code> <p>The group node to search in.</p> required <code>nodeType</code> <code>str</code> <p>The type of node to search for.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of node names of the specified type.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def nodesInGroupOfType(groupNode: str, nodeType: str) -&gt; List[str]:\n    \"\"\"\n    Find all nodes of a specific type within a group.\n\n    Args:\n        groupNode (str): The group node to search in.\n        nodeType (str): The type of node to search for.\n\n    Returns:\n        List[str]: A list of node names of the specified type.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.nodesUnderPointer","title":"<code>nodesUnderPointer(x, y)</code>","text":"<p>Gets the names of nodes under the mouse pointer coordinates.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def nodesUnderPointer(x: int, y: int) -&gt; List[str]:\n    \"\"\"\n    Gets the names of nodes under the mouse pointer coordinates.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.numFrames","title":"<code>numFrames()</code>","text":"<p>Gets the total number of frames in the session.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def numFrames() -&gt; int:\n    \"\"\"\n    Gets the total number of frames in the session.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.popInputToTop","title":"<code>popInputToTop()</code>","text":"<p>Pops the current input node to the top of the node graph.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def popInputToTop() -&gt; None:\n    \"\"\"\n    Pops the current input node to the top of the node graph.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.recordPixelInfo","title":"<code>recordPixelInfo(enable)</code>","text":"<p>Enables or disables recording of pixel information.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def recordPixelInfo(enable: bool) -&gt; None:\n    \"\"\"\n    Enables or disables recording of pixel information.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.reloadInOut","title":"<code>reloadInOut()</code>","text":"<p>Reloads media within the in and out points.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def reloadInOut() -&gt; None:\n    \"\"\"\n    Reloads media within the in and out points.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.removeFromProp","title":"<code>removeFromProp(nodeName, propName, value)</code>","text":"<p>Removes a value from a node property.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def removeFromProp(nodeName: str, propName: str, value: Any) -&gt; None:\n    \"\"\"\n    Removes a value from a node property.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.scale","title":"<code>scale()</code>","text":"<p>Gets the current view scale.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def scale() -&gt; float:\n    \"\"\"\n    Gets the current view scale.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.sequenceBoundaries","title":"<code>sequenceBoundaries()</code>","text":"<p>Gets the start and end frames of the current sequence.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def sequenceBoundaries() -&gt; List[int]:\n    \"\"\"\n    Gets the start and end frames of the current sequence.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.set","title":"<code>set(variableName, value)</code>","text":"<p>Sets the value of a variable.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def set(variableName: str, value: Any) -&gt; None:\n    \"\"\"\n    Sets the value of a variable.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setActiveState","title":"<code>setActiveState()</code>","text":"<p>Sets RV to an active state.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setActiveState() -&gt; None:\n    \"\"\"\n    Sets RV to an active state.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setAnnotationText","title":"<code>setAnnotationText(frame, text)</code>","text":"<p>Set the annotation text for a specific frame.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>int</code> <p>The frame number.</p> required <code>text</code> <code>str</code> <p>The text to set as annotation.</p> required Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setAnnotationText(frame: int, text: str) -&gt; None:\n    \"\"\"\n    Set the annotation text for a specific frame.\n\n    Args:\n        frame (int): The frame number.\n        text (str): The text to set as annotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setDisplayProfilesFromSettings","title":"<code>setDisplayProfilesFromSettings(enable)</code>","text":"<p>Sets display profiles based on settings.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setDisplayProfilesFromSettings(enable: bool) -&gt; None:\n    \"\"\"\n    Sets display profiles based on settings.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setInactiveState","title":"<code>setInactiveState()</code>","text":"<p>Sets RV to an inactive state.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setInactiveState() -&gt; None:\n    \"\"\"\n    Sets RV to an inactive state.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setScale","title":"<code>setScale(scale)</code>","text":"<p>Sets the current view scale.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setScale(scale: float) -&gt; None:\n    \"\"\"\n    Sets the current view scale.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setTranslation","title":"<code>setTranslation(x, y)</code>","text":"<p>Sets the translation of the current view.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setTranslation(x: float, y: float) -&gt; None:\n    \"\"\"\n    Sets the translation of the current view.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.setUIName","title":"<code>setUIName(nodeName, uiName)</code>","text":"<p>Sets the UI name for a node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def setUIName(nodeName: str, uiName: str) -&gt; None:\n    \"\"\"\n    Sets the UI name for a node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.sourceFrame","title":"<code>sourceFrame(sourceNode)</code>","text":"<p>Gets the current frame of a specific source node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def sourceFrame(sourceNode: str) -&gt; int:\n    \"\"\"\n    Gets the current frame of a specific source node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.sourceImageStructure","title":"<code>sourceImageStructure(sourceNode)</code>","text":"<p>Gets the image structure for a source node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def sourceImageStructure(sourceNode: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    Gets the image structure for a source node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.sourceMetaInfoAtFrame","title":"<code>sourceMetaInfoAtFrame(sourceNode, frame)</code>","text":"<p>Gets meta information for a source at a specific frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def sourceMetaInfoAtFrame(sourceNode: str, frame: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Gets meta information for a source at a specific frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepBackward","title":"<code>stepBackward()</code>","text":"<p>Steps backward by one frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepBackward() -&gt; None:\n    \"\"\"\n    Steps backward by one frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepBackward1","title":"<code>stepBackward1()</code>","text":"<p>Steps backward by one frame (duplicate definition).</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepBackward1() -&gt; None:\n    \"\"\"\n    Steps backward by one frame (duplicate definition).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepBackward10","title":"<code>stepBackward10()</code>","text":"<p>Steps backward by 10 frames.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepBackward10() -&gt; None:\n    \"\"\"\n    Steps backward by 10 frames.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepBackward100","title":"<code>stepBackward100()</code>","text":"<p>Steps backward by 100 frames.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepBackward100() -&gt; None:\n    \"\"\"\n    Steps backward by 100 frames.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepForward","title":"<code>stepForward()</code>","text":"<p>Steps forward by one frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepForward() -&gt; None:\n    \"\"\"\n    Steps forward by one frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepForward1","title":"<code>stepForward1()</code>","text":"<p>Steps forward by one frame.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepForward1() -&gt; None:\n    \"\"\"\n    Steps forward by one frame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepForward10","title":"<code>stepForward10()</code>","text":"<p>Steps forward by 10 frames.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepForward10() -&gt; None:\n    \"\"\"\n    Steps forward by 10 frames.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.stepForward100","title":"<code>stepForward100()</code>","text":"<p>Steps forward by 100 frames.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def stepForward100() -&gt; None:\n    \"\"\"\n    Steps forward by 100 frames.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleFilter","title":"<code>toggleFilter(filterName)</code>","text":"<p>Toggles a specific filter.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleFilter(filterName: str) -&gt; None:\n    \"\"\"\n    Toggles a specific filter.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleForwardsBackwards","title":"<code>toggleForwardsBackwards()</code>","text":"<p>Toggles playback direction.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleForwardsBackwards() -&gt; None:\n    \"\"\"\n    Toggles playback direction.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleFullScreen","title":"<code>toggleFullScreen()</code>","text":"<p>Toggles full screen mode.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleFullScreen() -&gt; None:\n    \"\"\"\n    Toggles full screen mode.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleMotionScope","title":"<code>toggleMotionScope()</code>","text":"<p>Toggles the motion scope overlay.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleMotionScope() -&gt; None:\n    \"\"\"\n    Toggles the motion scope overlay.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleMotionScopeFromState","title":"<code>toggleMotionScopeFromState(state)</code>","text":"<p>Toggles motion scope based on a boolean state.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleMotionScopeFromState(state: bool) -&gt; None:\n    \"\"\"\n    Toggles motion scope based on a boolean state.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.togglePlay","title":"<code>togglePlay()</code>","text":"<p>Toggles playback (play/pause).</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def togglePlay() -&gt; None:\n    \"\"\"\n    Toggles playback (play/pause).\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.togglePlayIfNoScrub","title":"<code>togglePlayIfNoScrub()</code>","text":"<p>Toggles playback only if not currently scrubbing.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def togglePlayIfNoScrub() -&gt; None:\n    \"\"\"\n    Toggles playback only if not currently scrubbing.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.togglePlayVerbose","title":"<code>togglePlayVerbose()</code>","text":"<p>Toggles playback with verbose output.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def togglePlayVerbose() -&gt; None:\n    \"\"\"\n    Toggles playback with verbose output.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleRealtime","title":"<code>toggleRealtime()</code>","text":"<p>Toggles realtime playback mode.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleRealtime() -&gt; None:\n    \"\"\"\n    Toggles realtime playback mode.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.toggleSync","title":"<code>toggleSync(connectionName)</code>","text":"<p>Toggles synchronization with a remote connection.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def toggleSync(connectionName: str) -&gt; None:\n    \"\"\"\n    Toggles synchronization with a remote connection.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.topLevelGroup","title":"<code>topLevelGroup()</code>","text":"<p>Gets the top-level group node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def topLevelGroup() -&gt; str:\n    \"\"\"\n    Gets the top-level group node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.translation","title":"<code>translation()</code>","text":"<p>Gets the current view translation [x, y].</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def translation() -&gt; List[float]:\n    \"\"\"\n    Gets the current view translation [x, y].\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.uiName","title":"<code>uiName(nodeName)</code>","text":"<p>Gets the UI name of a node.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def uiName(nodeName: str) -&gt; str:\n    \"\"\"\n    Gets the UI name of a node.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/extra_commands/index.html#client.ayon_openrv.typing.rv.extra_commands.updatePixelInfo","title":"<code>updatePixelInfo()</code>","text":"<p>Updates the displayed pixel information.</p> Source code in <code>client/ayon_openrv/typing/rv/extra_commands/__init__.py</code> <pre><code>def updatePixelInfo() -&gt; None:\n    \"\"\"\n    Updates the displayed pixel information.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/qtutils/index.html","title":"qtutils","text":"<p>Type hints for rv.qtutils module.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/qtutils/index.html#client.ayon_openrv.typing.rv.qtutils.dockWidget","title":"<code>dockWidget(widget, title, area=None, parent=None)</code>","text":"<p>Dock a widget in the RV interface.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>The widget to dock</p> required <code>title</code> <code>str</code> <p>Title of the dock widget</p> required <code>area</code> <code>Optional[int]</code> <p>Dock area to use (Qt.DockWidgetArea)</p> <code>None</code> <code>parent</code> <code>Optional[QMainWindow]</code> <p>Parent window, defaults to sessionWindow()</p> <code>None</code> <p>Returns:</p> Type Description <code>QDockWidget</code> <p>QtWidgets.QDockWidget: The created dock widget</p> Source code in <code>client/ayon_openrv/typing/rv/qtutils/__init__.py</code> <pre><code>def dockWidget(widget: QtWidgets.QWidget, \n               title: str, \n               area: Optional[int] = None, \n               parent: Optional[QtWidgets.QMainWindow] = None) -&gt; QtWidgets.QDockWidget:\n    \"\"\"\n    Dock a widget in the RV interface.\n\n    Args:\n        widget (QtWidgets.QWidget): The widget to dock\n        title (str): Title of the dock widget\n        area (Optional[int]): Dock area to use (Qt.DockWidgetArea)\n        parent (Optional[QtWidgets.QMainWindow]): Parent window, defaults to sessionWindow()\n\n    Returns:\n        QtWidgets.QDockWidget: The created dock widget\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/qtutils/index.html#client.ayon_openrv.typing.rv.qtutils.getLayer","title":"<code>getLayer()</code>","text":"<p>Returns the current layer.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The current layer object.</p> Source code in <code>client/ayon_openrv/typing/rv/qtutils/__init__.py</code> <pre><code>def getLayer() -&gt; Any:\n    \"\"\"\n    Returns the current layer.\n\n    Returns:\n        Any: The current layer object.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/qtutils/index.html#client.ayon_openrv.typing.rv.qtutils.getView","title":"<code>getView()</code>","text":"<p>Returns the current view.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The current view object.</p> Source code in <code>client/ayon_openrv/typing/rv/qtutils/__init__.py</code> <pre><code>def getView() -&gt; Any:\n    \"\"\"\n    Returns the current view.\n\n    Returns:\n        Any: The current view object.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/qtutils/index.html#client.ayon_openrv.typing.rv.qtutils.sessionWindow","title":"<code>sessionWindow()</code>","text":"<p>Returns the main window for the current RV session.</p> <p>Returns:</p> Type Description <code>QMainWindow</code> <p>QtWidgets.QMainWindow: The main RV application window.</p> Source code in <code>client/ayon_openrv/typing/rv/qtutils/__init__.py</code> <pre><code>def sessionWindow() -&gt; QtWidgets.QMainWindow:\n    \"\"\"\n    Returns the main window for the current RV session.\n\n    Returns:\n        QtWidgets.QMainWindow: The main RV application window.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html","title":"rvtypes","text":"<p>Type hints for rv.rvtypes module.</p>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.Event","title":"<code>Event</code>","text":"<p>Base class for RV events.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>class Event:\n    \"\"\"Base class for RV events.\"\"\"\n\n    def name(self) -&gt; str:\n        \"\"\"Get the name of the event.\n\n        Returns:\n            str: The event name\n        \"\"\"\n        pass\n\n    def contents(self) -&gt; str:\n        \"\"\"Get the contents/payload of the event.\n\n        Returns:\n            str: The event contents\n        \"\"\"\n        pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.Event.contents","title":"<code>contents()</code>","text":"<p>Get the contents/payload of the event.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The event contents</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def contents(self) -&gt; str:\n    \"\"\"Get the contents/payload of the event.\n\n    Returns:\n        str: The event contents\n    \"\"\"\n    pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.Event.name","title":"<code>name()</code>","text":"<p>Get the name of the event.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The event name</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def name(self) -&gt; str:\n    \"\"\"Get the name of the event.\n\n    Returns:\n        str: The event name\n    \"\"\"\n    pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.MinorMode","title":"<code>MinorMode</code>","text":"<p>Base class for defining minor modes in RV.</p> <p>Minor modes are used to extend the UI of RV with custom menus, keybindings, and event handlers.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>class MinorMode:\n    \"\"\"Base class for defining minor modes in RV.\n\n    Minor modes are used to extend the UI of RV with custom menus, keybindings,\n    and event handlers.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize a new minor mode.\"\"\"\n        pass\n\n    def init(self,\n             name: str,\n             globalBindings: Optional[List] = None,\n             overrideBindings: Optional[List[Tuple[str, Callable, str]]] = None,\n             menu: Optional[List[Tuple[str, List]]] = None,\n             sortKey: Optional[str] = None,\n             ordering: Optional[int] = None) -&gt; None:\n        \"\"\"Initialize the minor mode with the given parameters.\n\n        Args:\n            name: Unique identifier for this mode\n            globalBindings: Global key bindings\n            overrideBindings: Event overrides in the form (event_name, callback, description)\n            menu: Menu structure to create or augment\n            sortKey: Sort key for ordering modes\n            ordering: Numeric ordering value\n        \"\"\"\n        pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.MinorMode.__init__","title":"<code>__init__()</code>","text":"<p>Initialize a new minor mode.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize a new minor mode.\"\"\"\n    pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.MinorMode.init","title":"<code>init(name, globalBindings=None, overrideBindings=None, menu=None, sortKey=None, ordering=None)</code>","text":"<p>Initialize the minor mode with the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique identifier for this mode</p> required <code>globalBindings</code> <code>Optional[List]</code> <p>Global key bindings</p> <code>None</code> <code>overrideBindings</code> <code>Optional[List[Tuple[str, Callable, str]]]</code> <p>Event overrides in the form (event_name, callback, description)</p> <code>None</code> <code>menu</code> <code>Optional[List[Tuple[str, List]]]</code> <p>Menu structure to create or augment</p> <code>None</code> <code>sortKey</code> <code>Optional[str]</code> <p>Sort key for ordering modes</p> <code>None</code> <code>ordering</code> <code>Optional[int]</code> <p>Numeric ordering value</p> <code>None</code> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def init(self,\n         name: str,\n         globalBindings: Optional[List] = None,\n         overrideBindings: Optional[List[Tuple[str, Callable, str]]] = None,\n         menu: Optional[List[Tuple[str, List]]] = None,\n         sortKey: Optional[str] = None,\n         ordering: Optional[int] = None) -&gt; None:\n    \"\"\"Initialize the minor mode with the given parameters.\n\n    Args:\n        name: Unique identifier for this mode\n        globalBindings: Global key bindings\n        overrideBindings: Event overrides in the form (event_name, callback, description)\n        menu: Menu structure to create or augment\n        sortKey: Sort key for ordering modes\n        ordering: Numeric ordering value\n    \"\"\"\n    pass\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent","title":"<code>PixelBlockTransferEvent</code>","text":"<p>               Bases: <code>Event</code></p> <p>Event for transferring pixel blocks.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>class PixelBlockTransferEvent(Event):\n    \"\"\"Event for transferring pixel blocks.\"\"\"\n\n    def media(self) -&gt; str:\n        \"\"\"Get the media name.\"\"\"\n        ...\n\n    def view(self) -&gt; str:\n        \"\"\"Get the view name.\"\"\"\n        ...\n\n    def layer(self) -&gt; str:\n        \"\"\"Get the layer name.\"\"\"\n        ...\n\n    def frame(self) -&gt; int:\n        \"\"\"Get the frame number.\"\"\"\n        ...\n\n    def x(self) -&gt; int:\n        \"\"\"Get the x coordinate.\"\"\"\n        ...\n\n    def y(self) -&gt; int:\n        \"\"\"Get the y coordinate.\"\"\"\n        ...\n\n    def width(self) -&gt; int:\n        \"\"\"Get the width.\"\"\"\n        ...\n\n    def height(self) -&gt; int:\n        \"\"\"Get the height.\"\"\"\n        ...\n\n    def pixels(self) -&gt; Any:\n        \"\"\"Get the pixel data.\"\"\"\n        ...\n\n    def size(self) -&gt; int:\n        \"\"\"Get the size of the pixel data.\"\"\"\n        ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.frame","title":"<code>frame()</code>","text":"<p>Get the frame number.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def frame(self) -&gt; int:\n    \"\"\"Get the frame number.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.height","title":"<code>height()</code>","text":"<p>Get the height.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def height(self) -&gt; int:\n    \"\"\"Get the height.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.layer","title":"<code>layer()</code>","text":"<p>Get the layer name.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def layer(self) -&gt; str:\n    \"\"\"Get the layer name.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.media","title":"<code>media()</code>","text":"<p>Get the media name.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def media(self) -&gt; str:\n    \"\"\"Get the media name.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.pixels","title":"<code>pixels()</code>","text":"<p>Get the pixel data.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def pixels(self) -&gt; Any:\n    \"\"\"Get the pixel data.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.size","title":"<code>size()</code>","text":"<p>Get the size of the pixel data.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def size(self) -&gt; int:\n    \"\"\"Get the size of the pixel data.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.view","title":"<code>view()</code>","text":"<p>Get the view name.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def view(self) -&gt; str:\n    \"\"\"Get the view name.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.width","title":"<code>width()</code>","text":"<p>Get the width.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def width(self) -&gt; int:\n    \"\"\"Get the width.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.x","title":"<code>x()</code>","text":"<p>Get the x coordinate.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def x(self) -&gt; int:\n    \"\"\"Get the x coordinate.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.PixelBlockTransferEvent.y","title":"<code>y()</code>","text":"<p>Get the y coordinate.</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def y(self) -&gt; int:\n    \"\"\"Get the y coordinate.\"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/client/ayon_openrv/typing/rv/rvtypes/index.html#client.ayon_openrv.typing.rv.rvtypes.createMode","title":"<code>createMode()</code>","text":"<p>Function that RV calls to create a mode.</p> <p>This function must be implemented by each package.</p> <p>Returns:</p> Name Type Description <code>MinorMode</code> <code>MinorMode</code> <p>The created mode</p> Source code in <code>client/ayon_openrv/typing/rv/rvtypes/__init__.py</code> <pre><code>def createMode() -&gt; MinorMode:\n    \"\"\"Function that RV calls to create a mode.\n\n    This function must be implemented by each package.\n\n    Returns:\n        MinorMode: The created mode\n    \"\"\"\n    ...\n</code></pre>"},{"location":"autoapi/server/index.html","title":"server","text":""},{"location":"autoapi/server/settings/index.html","title":"settings","text":""},{"location":"autoapi/server/settings/imageio.html","title":"imageio","text":"<p>Providing models and setting values for image IO in OpenRV.</p>"},{"location":"autoapi/server/settings/imageio.html#server.settings.imageio.ImageIOSettings","title":"<code>ImageIOSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>OpenRV color management project settings.</p> Source code in <code>server/settings/imageio.py</code> <pre><code>class ImageIOSettings(BaseSettingsModel):\n    \"\"\"OpenRV color management project settings.\"\"\"\n\n    _isGroup: bool = True\n    activate_host_color_management: bool = SettingsField(\n        True, title=\"Enable Color Management\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html","title":"main","text":""}]}