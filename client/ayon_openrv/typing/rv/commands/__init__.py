"""Type hints for rv.commands module."""

from typing import Any, Callable, Dict, List, Optional, Tuple, Union

# Type aliases for common return types
Vector2f = List[float]  # 2D vector
Vector4f = List[float]  # 4D vector (RGBA)
StringProperty = str
IntProperty = int
FloatProperty = float
HalfProperty = float
ByteProperty = int

# Constants
# File kinds
UnknownFileKind: int = 0
ImageFileKind: int = 1
MovieFileKind: int = 2
CDLFileKind: int = 3
LUTFileKind: int = 4
DirectoryFileKind: int = 5
RVFileKind: int = 6
EDLFileKind: int = 7

# File/Directory Selection Flags
OneExistingFile: int = 0
ManyExistingFiles: int = 1
ManyExistingFilesAndDirectories: int = 2
OneFileName: int = 3
OneDirectory: int = 4

# Color spaces
RGB709: int = 0
CIEXYZ: int = 1

# Playback modes
PlayLoop: int = 0
PlayOnce: int = 1
PlayPingPong: int = 2

# Image status codes
OkImageStatus: int = 0
ErrorImageStatus: int = 1
WarningImageStatus: int = 2
NoImageStatus: int = 3
PartialImageStatus: int = 4
LoadingImageStatus: int = 5

# Session types
SequenceSession: int = 0
StackSession: int = 1

# Cache modes
CacheOff: int = 0
CacheBuffer: int = 1
CacheGreedy: int = 2

# Property types
IntType: int = 2
FloatType: int = 1
HalfType: int = 5
StringType: int = 8
ByteType: int = 6
ShortType: int = 7

# Display modes
IndependentDisplayMode: int = 0
MirrorDisplayMode: int = 1
NotADisplayMode: int = 2

# Menu states
NeutralMenuState: int = 0
UncheckedMenuState: int = 1
CheckedMenuState: int = 2
MixedStateMenuState: int = 3
DisabledMenuState: int = -1

# Video device IDs
VideoAndDataFormatID: int = 1
DeviceNameID: int = 4
ModuleNameID: int = 5

# Cursor types
CursorArrow: int = 0
CursorDefault: int = 0 # Alias for CursorArrow
CursorNone: int = 10

# Alert types
InfoAlert: int = 0
WarningAlert: int = 1
ErrorAlert: int = 2

# Network Permissions
NetworkPermissionAsk: int = 0
NetworkPermissionAllow: int = 1
NetworkPermissionDeny: int = 2

# Network Status
NetworkStatusOff: int = 0
NetworkStatusOn: int = 1


# Session Management Functions
def data() -> Any: ...
def sources() -> List[Tuple[str, int, int, int, float, bool, bool]]: ...
def setSessionType(sessionType: int) -> None: ...
def getSessionType() -> int: ...
def newSession() -> None: ...
def sessionNames() -> List[str]: ...
def sessionFromUrl(url: str) -> None: ...
def setSessionName(name: str) -> None: ...
def sessionName() -> str: ...
def setSessionFileName(fileName: str) -> None: ...
def sessionFileName() -> str: ...
def clearSession() -> None: ...


# Property Management
def propertyExists(propName: str) -> bool: ...
def newProperty(propName: str, propertyType: int, size: int) -> None: ...
def newNDProperty(propName: str, propertyType: int, size: int) -> None: ...
def setStringProperty(propName: str, values: List[str], allowResize: bool = False) -> None: ...
def setIntProperty(propName: str, values: List[int], allowResize: bool = False) -> None: ...
def setFloatProperty(propName: str, values: List[float], allowResize: bool = False) -> None: ...
def setHalfProperty(propName: str, values: List[float], allowResize: bool = False) -> None: ...
def setByteProperty(propName: str, values: List[int], allowResize: bool = False) -> None: ...
def insertStringProperty(propName: str, index: int, value: str) -> None: ...
def insertIntProperty(propName: str, index: int, value: int) -> None: ...
def insertFloatProperty(propName: str, index: int, value: float) -> None: ...
def insertHalfProperty(propName: str, index: int, value: float) -> None: ...
def insertByteProperty(propName: str, index: int, value: int) -> None: ...
def getStringProperty(propName: str) -> List[str]: ...
def getIntProperty(propName: str) -> List[int]: ...
def getFloatProperty(propName: str) -> List[float]: ...
def getHalfProperty(propName: str) -> List[float]: ...
def getByteProperty(propName: str) -> List[int]: ...
def properties(nodeName: str) -> List[str]: ...
def propertyInfo(propName: str) -> Dict[str, Any]: ...
def deleteProperty(propName: str) -> None: ...


# Source Management Functions
def sourceMedia(sourceName: str) -> Tuple[str, List[str], List[str]]: ...
def sourceMediaInfo(sourceName: str) -> Dict[str, Any]: ...
def sourceMediaInfoList(sourceName: str) -> List[Dict[str, Any]]: ...
def addSource(fileName: Union[str, List[str]], tag: str = "") -> None: ...
def addSourceVerbose(filePathsAndOptions: List[str], tag: str = "") -> str: ...
def addSourceBegin() -> None: ...
def addSourceEnd() -> None: ...
def startPreloadingMedia(fileName: str) -> None: ...
def addSources(fileNames: List[str], tag: str = "", processOpts: bool = False, merge: bool = False) -> None: ...
def addSourcesVerbose(filePathsAndOptions: List[List[str]], tag: str = "") -> List[str]: ...
def setProgressiveSourceLoading(enable: bool) -> None: ...
def progressiveSourceLoading() -> bool: ...
def newImageSource(
    mediaName: str,
    width: int,
    height: int,
    uncropWidth: int,
    uncropHeight: int,
    uncropX: int,
    uncropY: int,
    pixelAspect: float,
    channels: int,
    bitsPerChannel: int,
    floatingPoint: bool,
    startFrame: int,
    endFrame: int,
    fps: float,
    layers: Optional[List[str]] = None,
    views: Optional[List[str]] = None,
) -> str: ...
def newImageSourcePixels(
    sourceName: str,
    frame: int,
    layer: Optional[str] = None,
    view: Optional[str] = None,
) -> str: ...
def insertCreatePixelBlock(event: Any) -> None: ... # Check purpose?
def addToSource(sourceNode: str, fileName: str, tag: str) -> None: ...
def setSourceMedia(sourceNode: str, fileNames: List[str], tag: str = "") -> None: ...
def addSourceMediaRep(
    sourceNode: str,
    mediaRepName: str,
    mediaRepPathsAndOptions: List[str],
    tag: str = "",
) -> str: ...
def setActiveSourceMediaRep(sourceNode: str, mediaRepName: str, tag: str = "") -> None: ...
def sourceMediaRep(sourceNode: str) -> str: ...
def sourceMediaReps(sourceNode: str) -> List[str]: ...
def sourceMediaRepsAndNodes(sourceOrSwitchNode: str) -> List[Tuple[str, str]]: ...
def sourceMediaRepSwitchNode(sourceNode: str) -> str: ...
def sourceMediaRepSourceNode(sourceNode: str) -> str: ...
def relocateSource(sourceNode: str, oldFileName: str, newFileName: str) -> None: ...
def reload() -> None: ...
def loadChangedFrames() -> None: ...
def sequenceOfFile(fileName: str) -> List[str]: ...
def contractSequences(sourceNode: str) -> None: ...
def existingFilesInSequence(fileName: str) -> List[str]: ...
def existingFramesInSequence(fileName: str) -> List[int]: ...


# Image Information Functions
def getCurrentImageSize() -> Vector2f: ...
def getCurrentPixelValue(point: Vector2f) -> Vector4f: ...
def getCurrentAttributes() -> List[Tuple[str, str]]: ...
def getCurrentImageChannelNames() -> List[str]: ...
def getCurrentNodesOfType(typeName: str) -> List[str]: ...
def sourcePixelValue(sourceName: str, x: float, y: float) -> Vector4f: ...
def framebufferPixelValue(x: float, y: float) -> Vector4f: ...
def sourceAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, str]]: ...
def sourceDataAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, List[bytes]]]: ...
def sourceDisplayChannelNames(sourceName: str) -> List[str]: ...
def imagesAtPixel(x: float, y: float) -> List[str]: ...
def renderedImages() -> List[str]: ...
def sourceNameWithoutFrame(sourceName: str) -> str: ...
def imageGeometryByIndex(index: int) -> Dict[str, Any]: ... # Check return type
def imageGeometry(nodeName: str) -> Dict[str, Any]: ... # Check return type
def imageGeometryByTag(tag: str) -> Dict[str, Any]: ... # Check return type
def sourceAtPixel(x: float, y: float) -> Optional[str]: ...
def sourceGeometry(sourceName: str) -> Dict[str, Any]: ... # Check return type


# Color Management Functions
def readLUT(filename: str, nodeName: str, activate: bool = False) -> None: ...
def readCDL(filename: str, nodeName: str, activate: bool = False) -> None: ...
def ocioUpdateConfig(node: str) -> None: ...
def setFiltering(filtering: bool) -> None: ...
def getFiltering() -> bool: ...
def setBGMethod(method: str) -> None: ...
def bgMethod() -> str: ...


# Export and File Operations
def exportCurrentFrame(filename: str) -> None: ...
def exportCurrentSourceFrame(filename: str) -> None: ...
def saveSession(filePath: Optional[str] = None) -> bool: ...
def openFileDialog(title: str, directory: str, filter: str, flags: int) -> List[str]: ... # Check flags type
def saveFileDialog(title: str, directory: str, filter: str, flags: int) -> str: ... # Check flags type
def fileKind(fileName: str) -> int: ...
def rvioSetup() -> None: ... # Check purpose


# Timing and Performance Functions
def startTimer() -> None: ...
def elapsedTime() -> float: ...
def theTime() -> float: ...
def stopTimer() -> float: ...
def isTimerRunning() -> bool: ...
def fps() -> float: ...
def realFPS() -> float: ...
def setInc(inc: int) -> None: ...
def inc() -> int: ...
def mbps() -> float: ...
def resetMbps() -> None: ...
def loadCount() -> int: ...
def loadTotal() -> int: ...


# Option Management Functions
def optionsPlay() -> int: ...
def optionsPlayReset() -> None: ...
def optionsNoPackages() -> int: ...
def optionsProgressiveLoading() -> int: ...
def commandLineFlag(flagName: str, defaultValue: Optional[str] = None) -> str: ...


# Frame and Playback Control
def setFrame(frame: int) -> None: ...
def frame() -> int: ...
def setFrameStart(frame: int) -> None: ...
def setFrameEnd(frame: int) -> None: ...
def setFPS(fps: float) -> None: ...
def markFrame(frame: int) -> None: ... # Check params
def setOutPoint(frame: int) -> None: ...
def outPoint() -> int: ...
def setInPoint(frame: int) -> None: ...
def inPoint() -> int: ...
def narrowToRange(start: int, end: int) -> None: ...
def narrowedFrameStart() -> int: ...
def narrowedFrameEnd() -> int: ...
def isMarked(frame: int) -> bool: ...
def markedFrames() -> List[int]: ...
def isNarrowed() -> bool: ...
def setPlayMode(mode: int) -> None: ...
def playMode() -> int: ...
def play() -> None: ...
def stop() -> None: ...
def isPlaying() -> bool: ...
def scrubAudio(enable: bool) -> None: ...
def skipped() -> int: ...
def currentFrameStatus() -> int: ...
def isCurrentFrameIncomplete() -> bool: ...
def isCurrentFrameError() -> bool: ...


# Node Management
def nodes() -> List[str]: ...
def nodeType(nodeName: str) -> str: ...
def nodesInGroup(groupNode: str) -> List[str]: ...
def nodeGroup(nodeName: str) -> str: ...
def deleteNode(nodeName: str) -> None: ...
def viewNode() -> str: ...
def setViewNode(nodeName: str) -> None: ...
def sourcesAtFrame(frame: int) -> List[str]: ...
def center(nodeName: str) -> None: ...
def close(nodeName: str) -> None: ...
def popEventTable() -> str: ... # Check return
def newNode(nodeType: str, newNodeName: str) -> str: ... # Check return
def nodesOfType(typeName: str) -> List[str]: ...
def nodeGroupRoot(nodeName: str) -> str: ...
def previousViewNode() -> Optional[str]: ...
def nextViewNode() -> Optional[str]: ...
def closestNodesOfType(point: Vector2f, typeName: str) -> List[str]: ... # Check point type
def nodeExists(nodeName: str) -> bool: ...
def setNodeInputs(nodeName: str, inputs: List[str]) -> None: ...
def testNodeInputs(nodeName: str, inputs: List[str]) -> bool: ...
def nodeConnections(nodeName: str) -> Dict[str, List[str]]: ... # Check return type
def editNodeSource(nodeName: str) -> None: ...
def nodeTypes() -> List[str]: ...
def updateNodeDefinition_(nodeName: str, definition: str) -> None: ... # Check params
def writeAllNodeDefinitions(filePath: str) -> None: ...
def writeNodeDefinition(nodeName: str, filePath: str) -> None: ...


# Event Binding
def bind(mode: str, context: str, eventName: str, callback: Callable, description: str) -> None: ...
def unbind(mode: str, context: str, eventName: str, callback: Callable) -> None: ...
def unbindRegex(mode: str, context: str, eventRegex: str) -> None: ...
def activeEventTables() -> List[str]: ... # Check return
def pushEventTable(tableName: str) -> None: ...
def setEventTableBBox(tableName: str, bbox: List[int]) -> None: ... # Check bbox type
def defineMinorMode(modeName: str, docString: str) -> None: ...


# UI Control
def redraw() -> None: ...
def askForRedraw() -> None: ... # This function might not be in the source list, but keeping it for now.
def showConsole() -> None: ...
def fullScreenMode(enable: bool) -> None: ...
def isMenuBarVisible() -> bool: ...
def prefTabWidget() -> str: ... # Check return
def isFullScreen() -> bool: ...
def putUrlOnClipboard(url: str) -> None: ...
def setCursor(cursorType: int) -> None: ... # Check cursorType enum
def toggleMenuBar() -> None: ...
def setViewSize(width: int, height: int) -> None: ...
def viewSize() -> Vector2f: ...
def alertPanel(title: str, message: str, level: int, buttonLabels: List[str]) -> int: ... # Check level enum, return value
def resizeFit() -> None: ...
def startupResize() -> None: ... # Check purpose
def setWindowTitle(title: str) -> None: ...
def shortAppName() -> str: ...
def showTopViewToolbar(visible: bool) -> None: ...
def showBottomViewToolbar(visible: bool) -> None: ...
def isTopViewToolbarVisible() -> bool: ...
def isBottomViewToolbarVisible() -> bool: ...


# Network and Remote Functions
def remoteSendDataEvent(destination: str, eventType: str, data: str) -> None: ... # Check data type
def remoteNetworkStatus() -> str: ... # Check return
def remoteContacts() -> List[str]: ... # Check return
def remoteSendEvent(destination: str, event: Any) -> None: ... # Check event type
def showNetworkDialog() -> None: ...
def remoteConnect(host: str, port: int) -> None: ...
def networkAccessManager() -> Any: ... # Check return
def remoteNetwork() -> Any: ... # Check return
def remoteDisconnect(connectionName: str) -> None: ...
def remoteSendMessage(destination: str, message: str) -> None: ...
def remoteApplications() -> List[str]: ... # Check return
def myNetworkPort() -> int: ...
def myNetworkHost() -> str: ...
def remoteLocalContactName() -> str: ...
def setRemoteLocalContactName(name: str) -> None: ...
def remoteDefaultPermission() -> int: ... # Check return enum
def setRemoteDefaultPermission(permission: int) -> None: ... # Check permission enum


# Cache and Buffering Functions
def cacheDir() -> str: ...
def audioTextureID() -> int: ... # Check return
def audioTextureComplete() -> bool: ...
def audioCacheMode() -> int: ... # Check return enum
def setAudioCacheMode(mode: int) -> None: ... # Check mode enum
def cacheMode() -> int: ... # Check return enum
def setCacheMode(mode: int) -> None: ... # Check mode enum
def isBuffering() -> bool: ...
def isCaching() -> bool: ...
def cacheInfo() -> Dict[str, Any]: ... # Check return
def releaseAllCachedImages() -> None: ...
def cacheSize() -> int: ... # Check return
def cacheOutsideRegion() -> bool: ...
def setCacheOutsideRegion(enable: bool) -> None: ...
def releaseAllUnusedImages() -> None: ...


# History, Undo, and Redo
def undoHistory() -> List[str]: ... # Check return
def redoHistory() -> List[str]: ... # Check return
def undo() -> None: ...
def redo() -> None: ...
def undoPathSwapVars(path: str) -> str: ...
def redoPathSwapVars(path: str) -> str: ...
def clearHistory() -> None: ...


# Geometry and Space Functions
def margins() -> List[int]: ... # Check return type (l, r, t, b)
def setMargins(left: int, right: int, top: int, bottom: int) -> None: ...
def eventToCameraSpace(eventPoint: Vector2f) -> Vector2f: ...
def eventToImageSpace(eventPoint: Vector2f) -> Vector2f: ...
def imageToEventSpace(imagePoint: Vector2f) -> Vector2f: ...


# Binding and Context Functions
def bindings() -> List[Tuple[str, str, str]]: ... # Check return type (mode, context, event)
def bindingDocumentation(mode: str, context: str, eventName: str) -> str: ...
def metaEvaluate(context: str, eventName: str, event: Any) -> Any: ... # Check event type
def metaEvaluateClosestByType(context: str, eventName: str, event: Any, nodeType: str) -> Any: ... # Check event type
def mapPropertyToGlobalFrames(nodeName: str, propName: str) -> Dict[int, Any]: ... # Check return type


# System and Utility Functions
def encodePassword(password: str) -> str: ...
def decodePassword(encodedPassword: str) -> str: ...
def sendInternalEvent(eventName: str, event: Any) -> None: ... # Check event type
def testNodeInputs(nodeName: str, inputs: List[str]) -> bool: ... # Already listed under Node Management
def commandLineFlag(flagName: str, defaultValue: Optional[str] = None) -> str: ... # Already listed under Option Management
def httpPost(url: str, headers: Dict[str, str], body: bytes) -> Any: ... # Check return type
def httpGet(url: str, headers: Dict[str, str]) -> Any: ... # Check return type
def networkAccessManager() -> Any: ... # Already listed under Network
def remoteNetwork() -> Any: ... # Already listed under Network
def watchFile(fileName: str, callback: Callable) -> None: ...
def spoofConnectionStream(connectionName: str, data: str) -> None: ... # Check data type
def licensingState() -> Dict[str, Any]: ... # Check return
def launchTLI(arguments: List[str]) -> None: ... # Check arguments
def validateShotgunToken(token: str) -> bool: ...
def logMetrics(key: str, value: float) -> None: ...
def logMetricsWithProperties(key: str, value: float, properties: Dict[str, str]) -> None: ...
def getVersion() -> str: ...
def getReleaseVariant() -> str: ...
def isDebug() -> bool: ...
def crash() -> None: ...


# Driver Functions
def setDriverAttribute(driverName: str, attributeName: str, value: Any) -> None: ... # Check value type
def queryDriverAttribute(driverName: str, attributeName: str) -> Any: ... # Check return type
def videoDeviceIDString(deviceId: int, idType: int) -> str: ... # Check idType enum


# Profile Functions
def readProfile(profileName: str) -> Dict[str, Any]: ... # Check return
def writeProfile(profileName: str, profileData: Dict[str, Any]) -> None: ... # Check profileData
def editProfiles() -> None: ...


# Package Functions
def packageListFromSetting(settingName: str) -> List[str]: ...


# Mode Functions
def activeModes() -> List[str]: ...
def activateMode(modeName: str) -> None: ...
def deactivateMode(modeName: str) -> None: ...
def isModeActive(modeName: str) -> bool: ...
def setFilterLiveReviewEvents(enable: bool) -> None: ...
def filterLiveReviewEvents() -> bool: ...


# View/Display Functions
def contentAspect() -> float: ...
def setHardwareStereoMode(mode: int) -> None: ... # Check mode enum
def stereoSupported() -> bool: ...



# Session Management Functions
def data() -> Any: ...
def sources() -> List[Tuple[str, int, int, int, float, bool, bool]]: ...
def setSessionType(sessionType: int) -> None: ...
def getSessionType() -> int: ...


# Property Management
def propertyExists(propName: str) -> bool: ...
def newProperty(propName: str, propertyType: int, size: int) -> None: ...
def setStringProperty(propName: str, values: List[str], allowResize: bool = False) -> None: ...
def setIntProperty(propName: str, values: List[int], allowResize: bool = False) -> None: ...
def setFloatProperty(propName: str, values: List[float], allowResize: bool = False) -> None: ...
def getStringProperty(propName: str) -> List[str]: ...
def getIntProperty(propName: str) -> List[int]: ...
def getFloatProperty(propName: str) -> List[float]: ...
def getHalfProperty(propName: str) -> List[float]: ...
def getByteProperty(propName: str) -> List[int]: ...
def properties(nodeName: str) -> List[str]: ...
def propertyInfo(propName: str) -> Dict[str, Any]: ...


# Source Management Functions
def sourceMedia(sourceName: str) -> Tuple[str, List[str], List[str]]: ...
def addSource(fileName: Union[str, List[str]], tag: str = "") -> None: ...
def addSourceVerbose(filePathsAndOptions: List[str], tag: str = "") -> str: ...
def addSourceBegin() -> None: ...
def addSourceEnd() -> None: ...
def startPreloadingMedia(fileName: str) -> None: ...
def addSources(fileNames: List[str], tag: str = "", processOpts: bool = False, merge: bool = False) -> None: ...
def addSourcesVerbose(filePathsAndOptions: List[List[str]], tag: str = "") -> List[str]: ...
def setProgressiveSourceLoading(enable: bool) -> None: ...
def progressiveSourceLoading() -> bool: ...
def newImageSource(
    mediaName: str,
    width: int,
    height: int,
    uncropWidth: int,
    uncropHeight: int,
    uncropX: int,
    uncropY: int,
    pixelAspect: float,
    channels: int,
    bitsPerChannel: int,
    floatingPoint: bool,
    startFrame: int,
    endFrame: int,
    fps: float,
    layers: Optional[List[str]] = None,
    views: Optional[List[str]] = None,
) -> str: ...
def newImageSourcePixels(
    sourceName: str,
    frame: int,
    layer: Optional[str] = None,
    view: Optional[str] = None,
) -> str: ...
def insertCreatePixelBlock(event: Any) -> None: ...
def addToSource(sourceNode: str, fileName: str, tag: str) -> None: ...
def setSourceMedia(sourceNode: str, fileNames: List[str], tag: str = "") -> None: ...
def addSourceMediaRep(
    sourceNode: str,
    mediaRepName: str,
    mediaRepPathsAndOptions: List[str],
    tag: str = "",
) -> str: ...
def setActiveSourceMediaRep(sourceNode: str, mediaRepName: str, tag: str = "") -> None: ...
def sourceMediaRep(sourceNode: str) -> str: ...
def sourceMediaReps(sourceNode: str) -> List[str]: ...
def sourceMediaRepsAndNodes(sourceOrSwitchNode: str) -> List[Tuple[str, str]]: ...
def sourceMediaRepSwitchNode(sourceNode: str) -> str: ...
def sourceMediaRepSourceNode(sourceNode: str) -> str: ...
def relocateSource(sourceNode: str, oldFileName: str, newFileName: str) -> None: ...


# Image Information Functions
def getCurrentImageSize() -> Vector2f: ...
def getCurrentPixelValue(point: Vector2f) -> Vector4f: ...
def getCurrentAttributes() -> List[Tuple[str, str]]: ...
def getCurrentImageChannelNames() -> List[str]: ...
def getCurrentNodesOfType(typeName: str) -> List[str]: ...
def sourcePixelValue(sourceName: str, x: float, y: float) -> Vector4f: ...
def sourceAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, str]]: ...
def sourceDataAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, List[bytes]]]: ...
def sourceDisplayChannelNames(sourceName: str) -> List[str]: ...


# Color Management Functions
def readLUT(filename: str, nodeName: str, activate: bool = False) -> None: ...
def readCDL(filename: str, nodeName: str, activate: bool = False) -> None: ...
def ocioUpdateConfig(node: str) -> None: ...


# Export and File Operations
def exportCurrentFrame(filename: str) -> None: ...
def exportCurrentSourceFrame(filename: str) -> None: ...
def sequenceOfFile(fileName: str) -> List[str]: ...
def saveSession(filePath: Optional[str] = None) -> bool: ...
def sessionFileName() -> str: ...


# Timing and Performance Functions
def startTimer() -> None: ...
def elapsedTime() -> float: ...
def theTime() -> float: ...
def stopTimer() -> float: ...
def isTimerRunning() -> bool: ...


# Option Management Functions
def optionsPlay() -> int: ...
def optionsPlayReset() -> None: ...
def optionsNoPackages() -> int: ...
def optionsProgressiveLoading() -> int: ...
def commandLineFlag(flagName: str, defaultValue: Optional[str] = None) -> str: ...


# Frame and Playback Control
def setFrame(frame: int) -> None: ...
def frame() -> int: ...
def setFrameStart(frame: int) -> None: ...
def setFrameEnd(frame: int) -> None: ...
def setFPS(fps: float) -> None: ...


# Node Management
def nodes() -> List[str]: ...
def nodeType(nodeName: str) -> str: ...
def nodesInGroup(groupNode: str) -> List[str]: ...
def nodeGroup(nodeName: str) -> str: ...
def deleteNode(nodeName: str) -> None: ...
def viewNode() -> str: ...
def setViewNode(nodeName: str) -> None: ...
def sourcesAtFrame(frame: int) -> List[str]: ...


# Event Binding
def bind(mode: str, context: str, eventName: str, callback: Callable, description: str) -> None: ...


# UI Control
def redraw() -> None: ...
def askForRedraw() -> None: ...
