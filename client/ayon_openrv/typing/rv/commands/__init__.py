"""Type hints for rv.commands module."""

from typing import Any, Callable, Dict, List, Optional, Tuple, Union

# Type aliases for common return types
Vector2f = List[float]  # 2D vector
Vector4f = List[float]  # 4D vector (RGBA)
StringProperty = str
IntProperty = int
FloatProperty = float

# Constants
# Color spaces
RGB709: int = 0
CIEXYZ: int = 1

# Playback modes
PlayLoop: int = 0
PlayOnce: int = 1
PlayPingPong: int = 2

# Image status codes
OkImageStatus: int = 0
ErrorImageStatus: int = 1
WarningImageStatus: int = 2
NoImageStatus: int = 3
PartialImageStatus: int = 4
LoadingImageStatus: int = 5

# Session types
SequenceSession: int = 0
StackSession: int = 1

# Cache modes
CacheOff: int = 0
CacheBuffer: int = 1
CacheGreedy: int = 2

# Property types
IntType: int = 0
FloatType: int = 1
HalfType: int = 2
StringType: int = 3
ByteType: int = 4
ShortType: int = 5

# Display modes
IndependentDisplayMode: int = 0
MirrorDisplayMode: int = 1
NotADisplayMode: int = 2

# Menu states
CheckedMenuState: int = 1
UncheckedMenuState: int = 0

# Video device IDs
VideoAndDataFormatID: int = 0
DeviceNameID: int = 1
ModuleNameID: int = 2


# Session Management Functions
def data() -> Any: ...
def sources() -> List[Tuple[str, int, int, int, float, bool, bool]]: ...
def setSessionType(sessionType: int) -> None: ...
def getSessionType() -> int: ...


# Property Management
def propertyExists(propName: str) -> bool: ...
def newProperty(propName: str, propertyType: int, size: int) -> None: ...
def setStringProperty(propName: str, values: List[str], allowResize: bool = False) -> None: ...
def setIntProperty(propName: str, values: List[int], allowResize: bool = False) -> None: ...
def setFloatProperty(propName: str, values: List[float], allowResize: bool = False) -> None: ...
def getStringProperty(propName: str) -> List[str]: ...
def getIntProperty(propName: str) -> List[int]: ...
def getFloatProperty(propName: str) -> List[float]: ...
def getHalfProperty(propName: str) -> List[float]: ...
def getByteProperty(propName: str) -> List[int]: ...
def properties(nodeName: str) -> List[str]: ...
def propertyInfo(propName: str) -> Dict[str, Any]: ...


# Source Management Functions
def sourceMedia(sourceName: str) -> Tuple[str, List[str], List[str]]: ...
def addSource(fileName: Union[str, List[str]], tag: str = "") -> None: ...
def addSourceVerbose(filePathsAndOptions: List[str], tag: str = "") -> str: ...
def addSourceBegin() -> None: ...
def addSourceEnd() -> None: ...
def startPreloadingMedia(fileName: str) -> None: ...
def addSources(fileNames: List[str], tag: str = "", processOpts: bool = False, merge: bool = False) -> None: ...
def addSourcesVerbose(filePathsAndOptions: List[List[str]], tag: str = "") -> List[str]: ...
def setProgressiveSourceLoading(enable: bool) -> None: ...
def progressiveSourceLoading() -> bool: ...
def newImageSource(
    mediaName: str,
    width: int,
    height: int,
    uncropWidth: int,
    uncropHeight: int,
    uncropX: int,
    uncropY: int,
    pixelAspect: float,
    channels: int,
    bitsPerChannel: int,
    floatingPoint: bool,
    startFrame: int,
    endFrame: int,
    fps: float,
    layers: Optional[List[str]] = None,
    views: Optional[List[str]] = None,
) -> str: ...
def newImageSourcePixels(
    sourceName: str,
    frame: int,
    layer: Optional[str] = None,
    view: Optional[str] = None,
) -> str: ...
def insertCreatePixelBlock(event: Any) -> None: ...
def addToSource(sourceNode: str, fileName: str, tag: str) -> None: ...
def setSourceMedia(sourceNode: str, fileNames: List[str], tag: str = "") -> None: ...
def addSourceMediaRep(
    sourceNode: str,
    mediaRepName: str,
    mediaRepPathsAndOptions: List[str],
    tag: str = "",
) -> str: ...
def setActiveSourceMediaRep(sourceNode: str, mediaRepName: str, tag: str = "") -> None: ...
def sourceMediaRep(sourceNode: str) -> str: ...
def sourceMediaReps(sourceNode: str) -> List[str]: ...
def sourceMediaRepsAndNodes(sourceOrSwitchNode: str) -> List[Tuple[str, str]]: ...
def sourceMediaRepSwitchNode(sourceNode: str) -> str: ...
def sourceMediaRepSourceNode(sourceNode: str) -> str: ...
def relocateSource(sourceNode: str, oldFileName: str, newFileName: str) -> None: ...


# Image Information Functions
def getCurrentImageSize() -> Vector2f: ...
def getCurrentPixelValue(point: Vector2f) -> Vector4f: ...
def getCurrentAttributes() -> List[Tuple[str, str]]: ...
def getCurrentImageChannelNames() -> List[str]: ...
def getCurrentNodesOfType(typeName: str) -> List[str]: ...
def sourcePixelValue(sourceName: str, x: float, y: float) -> Vector4f: ...
def sourceAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, str]]: ...
def sourceDataAttributes(sourceName: str, mediaName: Optional[str] = None) -> List[Tuple[str, List[bytes]]]: ...
def sourceDisplayChannelNames(sourceName: str) -> List[str]: ...


# Color Management Functions
def readLUT(filename: str, nodeName: str, activate: bool = False) -> None: ...
def readCDL(filename: str, nodeName: str, activate: bool = False) -> None: ...
def ocioUpdateConfig(node: str) -> None: ...


# Export and File Operations
def exportCurrentFrame(filename: str) -> None: ...
def exportCurrentSourceFrame(filename: str) -> None: ...
def sequenceOfFile(fileName: str) -> List[str]: ...
def saveSession(filePath: Optional[str] = None) -> bool: ...
def sessionFileName() -> str: ...


# Timing and Performance Functions
def startTimer() -> None: ...
def elapsedTime() -> float: ...
def theTime() -> float: ...
def stopTimer() -> float: ...
def isTimerRunning() -> bool: ...


# Option Management Functions
def optionsPlay() -> int: ...
def optionsPlayReset() -> None: ...
def optionsNoPackages() -> int: ...
def optionsProgressiveLoading() -> int: ...
def commandLineFlag(flagName: str, defaultValue: Optional[str] = None) -> str: ...


# Frame and Playback Control
def setFrame(frame: int) -> None: ...
def frame() -> int: ...
def setFrameStart(frame: int) -> None: ...
def setFrameEnd(frame: int) -> None: ...
def setFPS(fps: float) -> None: ...


# Node Management
def nodes() -> List[str]: ...
def nodeType(nodeName: str) -> str: ...
def nodesInGroup(groupNode: str) -> List[str]: ...
def nodeGroup(nodeName: str) -> str: ...
def deleteNode(nodeName: str) -> None: ...
def viewNode() -> str: ...
def setViewNode(nodeName: str) -> None: ...
def sourcesAtFrame(frame: int) -> List[str]: ...


# Event Binding
def bind(mode: str, context: str, eventName: str, callback: Callable, description: str) -> None: ...


# UI Control
def redraw() -> None: ...
def askForRedraw() -> None: ...
